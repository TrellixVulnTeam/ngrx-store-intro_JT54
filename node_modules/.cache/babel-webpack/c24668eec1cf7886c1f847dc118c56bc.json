{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isArray_1 = require(\"../util/isArray\");\n\nvar race_1 = require(\"../observable/race\");\n\nfunction race() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n\n  return function raceOperatorFunction(source) {\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n      observables = observables[0];\n    }\n\n    return source.lift.call(race_1.race.apply(void 0, [source].concat(observables)));\n  };\n}\n\nexports.race = race; //# sourceMappingURL=race.js.map","map":{"version":3,"sources":["/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/rxjs/internal/operators/race.js"],"names":["Object","defineProperty","exports","value","isArray_1","require","race_1","race","observables","_i","arguments","length","raceOperatorFunction","source","isArray","lift","call","apply","concat"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,oBAAD,CAApB;;AACA,SAASE,IAAT,GAAgB;AACZ,MAAIC,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,WAAW,CAACC,EAAD,CAAX,GAAkBC,SAAS,CAACD,EAAD,CAA3B;AACH;;AACD,SAAO,SAASG,oBAAT,CAA8BC,MAA9B,EAAsC;AACzC,QAAIL,WAAW,CAACG,MAAZ,KAAuB,CAAvB,IAA4BP,SAAS,CAACU,OAAV,CAAkBN,WAAW,CAAC,CAAD,CAA7B,CAAhC,EAAmE;AAC/DA,MAAAA,WAAW,GAAGA,WAAW,CAAC,CAAD,CAAzB;AACH;;AACD,WAAOK,MAAM,CAACE,IAAP,CAAYC,IAAZ,CAAiBV,MAAM,CAACC,IAAP,CAAYU,KAAZ,CAAkB,KAAK,CAAvB,EAA0B,CAACJ,MAAD,EAASK,MAAT,CAAgBV,WAAhB,CAA1B,CAAjB,CAAP;AACH,GALD;AAMH;;AACDN,OAAO,CAACK,IAAR,GAAeA,IAAf,C,CACA","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isArray_1 = require(\"../util/isArray\");\nvar race_1 = require(\"../observable/race\");\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return function raceOperatorFunction(source) {\n        if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        return source.lift.call(race_1.race.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map"]},"metadata":{},"sourceType":"script"}