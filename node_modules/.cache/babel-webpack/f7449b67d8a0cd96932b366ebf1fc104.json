{"ast":null,"code":"import _toConsumableArray from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _inherits from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getShadowRoot } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\nvar _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var formFieldId_r1 = ctx.id;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\n\nvar _c1 = [\"*\"];\nvar _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\n\nvar MatAutocompleteSelectedEvent = /*#__PURE__*/_createClass(function MatAutocompleteSelectedEvent(\n/** Reference to the autocomplete panel that emitted the event. */\nsource,\n/** Option that was selected. */\noption) {\n  _classCallCheck(this, MatAutocompleteSelectedEvent);\n\n  this.source = source;\n  this.option = option;\n}); // Boilerplate for applying mixins to MatAutocomplete.\n\n/** @docs-private */\n\n\nvar MatAutocompleteBase = /*#__PURE__*/_createClass(function MatAutocompleteBase() {\n  _classCallCheck(this, MatAutocompleteBase);\n});\n\nvar _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\n\n\nvar MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\n\n\nvar _MatAutocompleteBase = /*#__PURE__*/function (_MatAutocompleteMixin) {\n  _inherits(_MatAutocompleteBase, _MatAutocompleteMixin);\n\n  var _super = _createSuper(_MatAutocompleteBase);\n\n  function _MatAutocompleteBase(_changeDetectorRef, _elementRef, defaults, platform) {\n    var _this;\n\n    _classCallCheck(this, _MatAutocompleteBase);\n\n    _this = _super.call(this);\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._elementRef = _elementRef;\n    _this._activeOptionChanges = Subscription.EMPTY;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n\n    _this.showPanel = false;\n    _this._isOpen = false;\n    /** Function that maps an option's control value to its display value in the trigger. */\n\n    _this.displayWith = null;\n    /** Event that is emitted whenever an option from the list is selected. */\n\n    _this.optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n\n    _this.opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n\n    _this.closed = new EventEmitter();\n    /** Emits whenever an option is activated using the keyboard. */\n\n    _this.optionActivated = new EventEmitter();\n    _this._classList = {};\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n\n    _this.id = \"mat-autocomplete-\".concat(_uniqueAutocompleteIdCounter++); // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n    // Safari using VoiceOver. We should occasionally check back to see whether the bug\n    // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n    // option altogether.\n\n    _this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n    _this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    return _this;\n  }\n  /** Whether the autocomplete panel is open. */\n\n\n  _createClass(_MatAutocompleteBase, [{\n    key: \"isOpen\",\n    get: function get() {\n      return this._isOpen && this.showPanel;\n    }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n\n  }, {\n    key: \"autoActiveFirstOption\",\n    get: function get() {\n      return this._autoActiveFirstOption;\n    },\n    set: function set(value) {\n      this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n\n  }, {\n    key: \"classList\",\n    set: function set(value) {\n      if (value && value.length) {\n        this._classList = coerceStringArray(value).reduce(function (classList, className) {\n          classList[className] = true;\n          return classList;\n        }, {});\n      } else {\n        this._classList = {};\n      }\n\n      this._setVisibilityClasses(this._classList);\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n      this._activeOptionChanges = this._keyManager.change.subscribe(function (index) {\n        _this2.optionActivated.emit({\n          source: _this2,\n          option: _this2.options.toArray()[index] || null\n        });\n      }); // Set the initial visibility state.\n\n      this._setVisibility();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n\n  }, {\n    key: \"_setScrollTop\",\n    value: function _setScrollTop(scrollTop) {\n      if (this.panel) {\n        this.panel.nativeElement.scrollTop = scrollTop;\n      }\n    }\n    /** Returns the panel's scrollTop. */\n\n  }, {\n    key: \"_getScrollTop\",\n    value: function _getScrollTop() {\n      return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n\n  }, {\n    key: \"_setVisibility\",\n    value: function _setVisibility() {\n      this.showPanel = !!this.options.length;\n\n      this._setVisibilityClasses(this._classList);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n\n  }, {\n    key: \"_emitSelectEvent\",\n    value: function _emitSelectEvent(option) {\n      var event = new MatAutocompleteSelectedEvent(this, option);\n      this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n\n  }, {\n    key: \"_getPanelAriaLabelledby\",\n    value: function _getPanelAriaLabelledby(labelId) {\n      if (this.ariaLabel) {\n        return null;\n      }\n\n      var labelExpression = labelId ? labelId + ' ' : '';\n      return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n\n  }, {\n    key: \"_setVisibilityClasses\",\n    value: function _setVisibilityClasses(classList) {\n      classList[this._visibleClass] = this.showPanel;\n      classList[this._hiddenClass] = !this.showPanel;\n    }\n  }]);\n\n  return _MatAutocompleteBase;\n}(_MatAutocompleteMixinBase);\n\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) {\n  return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform));\n};\n\n_MatAutocompleteBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteBase,\n  viewQuery: function _MatAutocompleteBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, 3);\n      ɵngcc0.ɵɵviewQuery(_c0, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    }\n  },\n  inputs: {\n    displayWith: \"displayWith\",\n    autoActiveFirstOption: \"autoActiveFirstOption\",\n    classList: [\"class\", \"classList\"],\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    panelWidth: \"panelWidth\"\n  },\n  outputs: {\n    optionSelected: \"optionSelected\",\n    opened: \"opened\",\n    closed: \"closed\",\n    optionActivated: \"optionActivated\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\n_MatAutocompleteBase.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: Platform\n  }];\n};\n\n_MatAutocompleteBase.propDecorators = {\n  template: [{\n    type: ViewChild,\n    args: [TemplateRef, {\n      static: true\n    }]\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  autoActiveFirstOption: [{\n    type: Input\n  }],\n  panelWidth: [{\n    type: Input\n  }],\n  optionSelected: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  optionActivated: [{\n    type: Output\n  }],\n  classList: [{\n    type: Input,\n    args: ['class']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, {\n    displayWith: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    optionActivated: [{\n      type: Output\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }],\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef, {\n        static: true\n      }]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    panelWidth: [{\n      type: Input\n    }]\n  });\n})();\n\nvar MatAutocomplete = /*#__PURE__*/function (_MatAutocompleteBase2) {\n  _inherits(MatAutocomplete, _MatAutocompleteBase2);\n\n  var _super2 = _createSuper(MatAutocomplete);\n\n  function MatAutocomplete() {\n    var _this3;\n\n    _classCallCheck(this, MatAutocomplete);\n\n    _this3 = _super2.apply(this, arguments);\n    _this3._visibleClass = 'mat-autocomplete-visible';\n    _this3._hiddenClass = 'mat-autocomplete-hidden';\n    return _this3;\n  }\n\n  return _createClass(MatAutocomplete);\n}(_MatAutocompleteBase);\n\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) {\n  return ɵMatAutocomplete_BaseFactory(t || MatAutocomplete);\n};\n\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatAutocomplete,\n  selectors: [[\"mat-autocomplete\"]],\n  contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-autocomplete\"],\n  inputs: {\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matAutocomplete\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatAutocomplete\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n  template: function MatAutocomplete_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    }\n  },\n  directives: [ɵngcc2.NgClass],\n  styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nMatAutocomplete.propDecorators = {\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MAT_OPTGROUP, {\n      descendants: true\n    }]\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }]\n};\nvar ɵMatAutocomplete_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-autocomplete'\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }],\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n    }]\n  }], null, {\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n\n\nvar _MatAutocompleteOriginBase = /*#__PURE__*/_createClass(function _MatAutocompleteOriginBase(\n/** Reference to the element on which the directive is applied. */\nelementRef) {\n  _classCallCheck(this, _MatAutocompleteOriginBase);\n\n  this.elementRef = elementRef;\n});\n\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) {\n  return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\n_MatAutocompleteOriginBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteOriginBase\n});\n\n_MatAutocompleteOriginBase.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n\n\nvar MatAutocompleteOrigin = /*#__PURE__*/function (_MatAutocompleteOrigi) {\n  _inherits(MatAutocompleteOrigin, _MatAutocompleteOrigi);\n\n  var _super3 = _createSuper(MatAutocompleteOrigin);\n\n  function MatAutocompleteOrigin() {\n    _classCallCheck(this, MatAutocompleteOrigin);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return _createClass(MatAutocompleteOrigin);\n}(_MatAutocompleteOriginBase);\n\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) {\n  return ɵMatAutocompleteOrigin_BaseFactory(t || MatAutocompleteOrigin);\n};\n\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteOrigin,\n  selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n  exportAs: [\"matAutocompleteOrigin\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatAutocompleteOrigin_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\n\n\nvar AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\n\nvar AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\n\nvar MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatAutocompleteTrigger;\n  }),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n\n\nvar _MatAutocompleteTriggerBase = /*#__PURE__*/function () {\n  function _MatAutocompleteTriggerBase(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n    var _this4 = this;\n\n    _classCallCheck(this, _MatAutocompleteTriggerBase);\n\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._defaults = _defaults;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /** Whether or not the label state is being overridden. */\n\n    this._manuallyFloatingLabel = false;\n    /** Subscription to viewport size changes. */\n\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n\n    this._canOpenOnNextFocus = true;\n    /** Stream of keyboard events that can close the panel. */\n\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n\n    this._windowBlurHandler = function () {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      _this4._canOpenOnNextFocus = _this4._document.activeElement !== _this4._element.nativeElement || _this4.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n\n\n    this._onChange = function () {};\n    /** `View -> model callback called when autocomplete has been touched` */\n\n\n    this._onTouched = function () {};\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n\n\n    this.position = 'auto';\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /** Stream of autocomplete option selections. */\n\n    this.optionSelections = defer(function () {\n      if (_this4.autocomplete && _this4.autocomplete.options) {\n        return merge.apply(void 0, _toConsumableArray(_this4.autocomplete.options.map(function (option) {\n          return option.onSelectionChange;\n        })));\n      } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n\n\n      return _this4._zone.onStable.pipe(take(1), switchMap(function () {\n        return _this4.optionSelections;\n      }));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n\n\n  _createClass(_MatAutocompleteTriggerBase, [{\n    key: \"autocompleteDisabled\",\n    get: function get() {\n      return this._autocompleteDisabled;\n    },\n    set: function set(value) {\n      this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this5 = this;\n\n      var window = this._getWindow();\n\n      if (typeof window !== 'undefined') {\n        this._zone.runOutsideAngular(function () {\n          return window.addEventListener('blur', _this5._windowBlurHandler);\n        });\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes['position'] && this._positionStrategy) {\n        this._setStrategyPositions(this._positionStrategy);\n\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var window = this._getWindow();\n\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('blur', this._windowBlurHandler);\n      }\n\n      this._viewportSubscription.unsubscribe();\n\n      this._componentDestroyed = true;\n\n      this._destroyPanel();\n\n      this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n\n  }, {\n    key: \"panelOpen\",\n    get: function get() {\n      return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n\n  }, {\n    key: \"openPanel\",\n    value: function openPanel() {\n      this._attachOverlay();\n\n      this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n\n  }, {\n    key: \"closePanel\",\n    value: function closePanel() {\n      this._resetLabel();\n\n      if (!this._overlayAttached) {\n        return;\n      }\n\n      if (this.panelOpen) {\n        // Only emit if the panel was visible.\n        this.autocomplete.closed.emit();\n      }\n\n      this.autocomplete._isOpen = this._overlayAttached = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n\n        this._closingActionsSubscription.unsubscribe();\n      } // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this._overlayAttached) {\n        this._overlayRef.updatePosition();\n      }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n\n  }, {\n    key: \"panelClosingActions\",\n    get: function get() {\n      var _this6 = this;\n\n      return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(function () {\n        return _this6._overlayAttached;\n      })), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(function () {\n        return _this6._overlayAttached;\n      })) : of()).pipe( // Normalize the output so we return a consistent type.\n      map(function (event) {\n        return event instanceof MatOptionSelectionChange ? event : null;\n      }));\n    }\n    /** The currently active option, coerced to MatOption type. */\n\n  }, {\n    key: \"activeOption\",\n    get: function get() {\n      if (this.autocomplete && this.autocomplete._keyManager) {\n        return this.autocomplete._keyManager.activeItem;\n      }\n\n      return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n\n  }, {\n    key: \"_getOutsideClickStream\",\n    value: function _getOutsideClickStream() {\n      var _this7 = this;\n\n      return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(function (event) {\n        // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n        // fall back to check the first element in the path of the click event.\n        var clickTarget = _this7._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] : event.target;\n        var formField = _this7._formField ? _this7._formField._elementRef.nativeElement : null;\n        var customOrigin = _this7.connectedTo ? _this7.connectedTo.elementRef.nativeElement : null;\n        return _this7._overlayAttached && clickTarget !== _this7._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!_this7._overlayRef && !_this7._overlayRef.overlayElement.contains(clickTarget);\n      }));\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      var _this8 = this;\n\n      Promise.resolve(null).then(function () {\n        return _this8._setTriggerValue(value);\n      });\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this._element.nativeElement.disabled = isDisabled;\n    }\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      var keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE\n      // in line with other browsers. By default, pressing escape on IE will cause it to revert\n      // the input value to the one that it had on focus, however it won't dispatch any events\n      // which means that the model value will be out of sync with the view.\n\n      if (keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n      }\n\n      if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n        this.activeOption._selectViaInteraction();\n\n        this._resetActiveItem();\n\n        event.preventDefault();\n      } else if (this.autocomplete) {\n        var prevActiveItem = this.autocomplete._keyManager.activeItem;\n        var isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n        if (this.panelOpen || keyCode === TAB) {\n          this.autocomplete._keyManager.onKeydown(event);\n        } else if (isArrowKey && this._canOpen()) {\n          this.openPanel();\n        }\n\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n        }\n      }\n    }\n  }, {\n    key: \"_handleInput\",\n    value: function _handleInput(event) {\n      var target = event.target;\n      var value = target.value; // Based on `NumberValueAccessor` from forms.\n\n      if (target.type === 'number') {\n        value = value == '' ? null : parseFloat(value);\n      } // If the input has a placeholder, IE will fire the `input` event on page load,\n      // focus and blur, in addition to when the user actually changed the value. To\n      // filter out all of the extra events, we save the value on focus and between\n      // `input` events, and we check whether it changed.\n      // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n      if (this._previousValue !== value) {\n        this._previousValue = value;\n\n        this._onChange(value);\n\n        if (this._canOpen() && this._document.activeElement === event.target) {\n          this.openPanel();\n        }\n      }\n    }\n  }, {\n    key: \"_handleFocus\",\n    value: function _handleFocus() {\n      if (!this._canOpenOnNextFocus) {\n        this._canOpenOnNextFocus = true;\n      } else if (this._canOpen()) {\n        this._previousValue = this._element.nativeElement.value;\n\n        this._attachOverlay();\n\n        this._floatLabel(true);\n      }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n\n  }, {\n    key: \"_floatLabel\",\n    value: function _floatLabel() {\n      var shouldAnimate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this._formField && this._formField.floatLabel === 'auto') {\n        if (shouldAnimate) {\n          this._formField._animateAndLockLabel();\n        } else {\n          this._formField.floatLabel = 'always';\n        }\n\n        this._manuallyFloatingLabel = true;\n      }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n\n  }, {\n    key: \"_resetLabel\",\n    value: function _resetLabel() {\n      if (this._manuallyFloatingLabel) {\n        this._formField.floatLabel = 'auto';\n        this._manuallyFloatingLabel = false;\n      }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n\n  }, {\n    key: \"_subscribeToClosingActions\",\n    value: function _subscribeToClosingActions() {\n      var _this9 = this;\n\n      var firstStable = this._zone.onStable.pipe(take(1));\n\n      var optionChanges = this.autocomplete.options.changes.pipe(tap(function () {\n        return _this9._positionStrategy.reapplyLastPosition();\n      }), // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)); // When the zone is stable initially, and when the option list changes...\n\n      return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      switchMap(function () {\n        var wasOpen = _this9.panelOpen;\n\n        _this9._resetActiveItem();\n\n        _this9.autocomplete._setVisibility();\n\n        if (_this9.panelOpen) {\n          _this9._overlayRef.updatePosition(); // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n          // event, because we may not have emitted it when the panel was attached. This\n          // can happen if the users opens the panel and there are no options, but the\n          // options come in slightly later or as a result of the value changing.\n\n\n          if (wasOpen !== _this9.panelOpen) {\n            _this9.autocomplete.opened.emit();\n          }\n        }\n\n        return _this9.panelClosingActions;\n      }), // when the first closing event occurs...\n      take(1)) // set the value, close the panel, and complete.\n      .subscribe(function (event) {\n        return _this9._setValueAndClose(event);\n      });\n    }\n    /** Destroys the autocomplete suggestion panel. */\n\n  }, {\n    key: \"_destroyPanel\",\n    value: function _destroyPanel() {\n      if (this._overlayRef) {\n        this.closePanel();\n\n        this._overlayRef.dispose();\n\n        this._overlayRef = null;\n      }\n    }\n  }, {\n    key: \"_setTriggerValue\",\n    value: function _setTriggerValue(value) {\n      var toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value; // Simply falling back to an empty string if the display value is falsy does not work properly.\n      // The display value can also be the number zero and shouldn't fall back to an empty string.\n\n      var inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n      // through change detection.\n\n      if (this._formField) {\n        this._formField._control.value = inputValue;\n      } else {\n        this._element.nativeElement.value = inputValue;\n      }\n\n      this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n\n  }, {\n    key: \"_setValueAndClose\",\n    value: function _setValueAndClose(event) {\n      if (event && event.source) {\n        this._clearPreviousSelectedOption(event.source);\n\n        this._setTriggerValue(event.source.value);\n\n        this._onChange(event.source.value);\n\n        this._element.nativeElement.focus();\n\n        this.autocomplete._emitSelectEvent(event.source);\n      }\n\n      this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n\n  }, {\n    key: \"_clearPreviousSelectedOption\",\n    value: function _clearPreviousSelectedOption(skip) {\n      this.autocomplete.options.forEach(function (option) {\n        if (option !== skip && option.selected) {\n          option.deselect();\n        }\n      });\n    }\n  }, {\n    key: \"_attachOverlay\",\n    value: function _attachOverlay() {\n      var _this10 = this;\n\n      var _a;\n\n      if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatAutocompleteMissingPanelError();\n      } // We want to resolve this once, as late as possible so that we can be\n      // sure that the element has been moved into its final place in the DOM.\n\n\n      if (this._isInsideShadowRoot == null) {\n        this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n      }\n\n      var overlayRef = this._overlayRef;\n\n      if (!overlayRef) {\n        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n          id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId()\n        });\n        overlayRef = this._overlay.create(this._getOverlayConfig());\n        this._overlayRef = overlayRef; // Use the `keydownEvents` in order to take advantage of\n        // the overlay event targeting provided by the CDK overlay.\n\n        overlayRef.keydownEvents().subscribe(function (event) {\n          // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n          // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n          if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n            _this10._resetActiveItem();\n\n            _this10._closeKeyEventStream.next(); // We need to stop propagation, otherwise the event will eventually\n            // reach the input itself and cause the overlay to be reopened.\n\n\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        });\n        this._viewportSubscription = this._viewportRuler.change().subscribe(function () {\n          if (_this10.panelOpen && overlayRef) {\n            overlayRef.updateSize({\n              width: _this10._getPanelWidth()\n            });\n          }\n        });\n      } else {\n        // Update the trigger, panel width and direction, in case anything has changed.\n        this._positionStrategy.setOrigin(this._getConnectedElement());\n\n        overlayRef.updateSize({\n          width: this._getPanelWidth()\n        });\n      }\n\n      if (overlayRef && !overlayRef.hasAttached()) {\n        overlayRef.attach(this._portal);\n        this._closingActionsSubscription = this._subscribeToClosingActions();\n      }\n\n      var wasOpen = this.panelOpen;\n\n      this.autocomplete._setVisibility();\n\n      this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n      // autocomplete won't be shown if there are no options.\n\n      if (this.panelOpen && wasOpen !== this.panelOpen) {\n        this.autocomplete.opened.emit();\n      }\n    }\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig() {\n      var _a;\n\n      return new OverlayConfig({\n        positionStrategy: this._getOverlayPosition(),\n        scrollStrategy: this._scrollStrategy(),\n        width: this._getPanelWidth(),\n        direction: this._dir,\n        panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass\n      });\n    }\n  }, {\n    key: \"_getOverlayPosition\",\n    value: function _getOverlayPosition() {\n      var strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n\n      this._setStrategyPositions(strategy);\n\n      this._positionStrategy = strategy;\n      return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n\n  }, {\n    key: \"_setStrategyPositions\",\n    value: function _setStrategyPositions(positionStrategy) {\n      // Note that we provide horizontal fallback positions, even though by default the dropdown\n      // width matches the input, because consumers can override the width. See #18854.\n      var belowPositions = [{\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n      }]; // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n\n      var panelClass = this._aboveClass;\n      var abovePositions = [{\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        panelClass: panelClass\n      }, {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        panelClass: panelClass\n      }];\n      var positions;\n\n      if (this.position === 'above') {\n        positions = abovePositions;\n      } else if (this.position === 'below') {\n        positions = belowPositions;\n      } else {\n        positions = [].concat(belowPositions, abovePositions);\n      }\n\n      positionStrategy.withPositions(positions);\n    }\n  }, {\n    key: \"_getConnectedElement\",\n    value: function _getConnectedElement() {\n      if (this.connectedTo) {\n        return this.connectedTo.elementRef;\n      }\n\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n  }, {\n    key: \"_getPanelWidth\",\n    value: function _getPanelWidth() {\n      return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n\n  }, {\n    key: \"_getHostWidth\",\n    value: function _getHostWidth() {\n      return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n\n  }, {\n    key: \"_resetActiveItem\",\n    value: function _resetActiveItem() {\n      var autocomplete = this.autocomplete;\n\n      if (autocomplete.autoActiveFirstOption) {\n        // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n        // the former will find the next enabled option, if the first one is disabled.\n        autocomplete._keyManager.setFirstItemActive();\n      } else {\n        autocomplete._keyManager.setActiveItem(-1);\n      }\n    }\n    /** Determines whether the panel can be opened. */\n\n  }, {\n    key: \"_canOpen\",\n    value: function _canOpen() {\n      var element = this._element.nativeElement;\n      return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      var _a;\n\n      return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n\n  }, {\n    key: \"_scrollToOption\",\n    value: function _scrollToOption(index) {\n      // Given that we are not actually focusing active options, we must manually adjust scroll\n      // to reveal options below the fold. First, we find the offset of the option from the top\n      // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n      // the panel height + the option height, so the active option will be just visible at the\n      // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n      // will become the offset. If that offset is visible within the panel already, the scrollTop is\n      // not adjusted.\n      var autocomplete = this.autocomplete;\n\n      var labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        autocomplete._setScrollTop(0);\n      } else if (autocomplete.panel) {\n        var option = autocomplete.options.toArray()[index];\n\n        if (option) {\n          var element = option._getHostElement();\n\n          var newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n\n          autocomplete._setScrollTop(newScrollPosition);\n        }\n      }\n    }\n  }]);\n\n  return _MatAutocompleteTriggerBase;\n}();\n\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) {\n  return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8));\n};\n\n_MatAutocompleteTriggerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteTriggerBase,\n  inputs: {\n    position: [\"matAutocompletePosition\", \"position\"],\n    autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n    autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"],\n    autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n    connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"]\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\n_MatAutocompleteTriggerBase.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Overlay\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_FORM_FIELD]\n    }, {\n      type: Host\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: ViewportRuler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n_MatAutocompleteTriggerBase.propDecorators = {\n  autocomplete: [{\n    type: Input,\n    args: ['matAutocomplete']\n  }],\n  position: [{\n    type: Input,\n    args: ['matAutocompletePosition']\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['matAutocompleteConnectedTo']\n  }],\n  autocompleteAttribute: [{\n    type: Input,\n    args: ['autocomplete']\n  }],\n  autocompleteDisabled: [{\n    type: Input,\n    args: ['matAutocompleteDisabled']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc4.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc6.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc5.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matAutocompletePosition']\n    }],\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }],\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }]\n  });\n})();\n\nvar MatAutocompleteTrigger = /*#__PURE__*/function (_MatAutocompleteTrigg) {\n  _inherits(MatAutocompleteTrigger, _MatAutocompleteTrigg);\n\n  var _super4 = _createSuper(MatAutocompleteTrigger);\n\n  function MatAutocompleteTrigger() {\n    var _this11;\n\n    _classCallCheck(this, MatAutocompleteTrigger);\n\n    _this11 = _super4.apply(this, arguments);\n    _this11._aboveClass = 'mat-autocomplete-panel-above';\n    return _this11;\n  }\n\n  return _createClass(MatAutocompleteTrigger);\n}(_MatAutocompleteTriggerBase);\n\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) {\n  return ɵMatAutocompleteTrigger_BaseFactory(t || MatAutocompleteTrigger);\n};\n\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteTrigger,\n  selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n  hostAttrs: [1, \"mat-autocomplete-trigger\"],\n  hostVars: 7,\n  hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n        return ctx._handleInput($event);\n      })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    }\n  },\n  exportAs: [\"matAutocompleteTrigger\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatAutocompleteTrigger_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: \"input[matAutocomplete], textarea[matAutocomplete]\",\n      host: {\n        'class': 'mat-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        '[attr.aria-haspopup]': '!autocompleteDisabled',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatAutocompleteModule = /*#__PURE__*/_createClass(function MatAutocompleteModule() {\n  _classCallCheck(this, MatAutocompleteModule);\n});\n\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n  return new (t || MatAutocompleteModule)();\n};\n\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatAutocompleteModule\n});\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, {\n    declarations: function declarations() {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin];\n    },\n    imports: function imports() {\n      return [OverlayModule, MatOptionModule, MatCommonModule, CommonModule];\n    },\n    exports: function exports() {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n      exports: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError }; //# sourceMappingURL=autocomplete.js.map","map":{"version":3,"sources":["/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js"],"names":["ActiveDescendantKeyManager","coerceBooleanProperty","coerceStringArray","Platform","_getShadowRoot","InjectionToken","EventEmitter","Directive","ChangeDetectorRef","ElementRef","Inject","ViewChild","TemplateRef","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","ViewContainerRef","NgZone","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","Subscription","Subject","defer","merge","of","fromEvent","DOCUMENT","CommonModule","Overlay","OverlayConfig","OverlayModule","ViewportRuler","CdkScrollableModule","Directionality","ESCAPE","hasModifierKey","ENTER","UP_ARROW","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","MatFormField","MAT_FORM_FIELD","take","switchMap","filter","map","tap","delay","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","id","ctx_r0","ɵɵnextContext","ɵɵproperty","_classList","ɵɵattribute","ariaLabel","_getPanelAriaLabelledby","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","_autoActiveFirstOption","value","length","reduce","classList","className","_setVisibilityClasses","nativeElement","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","unsubscribe","scrollTop","panel","markForCheck","event","labelId","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","_MatAutocompleteBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatAutocompleteBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","template","first","inputs","panelWidth","outputs","features","ɵɵInheritDefinitionFeature","ctorParameters","undefined","decorators","args","propDecorators","static","ngDevMode","ɵsetClassMetadata","MatAutocomplete","arguments","MatAutocomplete_Factory","ɵMatAutocomplete_BaseFactory","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","optionGroups","hostAttrs","disableRipple","exportAs","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","directives","NgClass","styles","encapsulation","changeDetection","descendants","ɵɵgetInheritedFactory","selector","None","OnPush","host","providers","_MatAutocompleteOriginBase","elementRef","_MatAutocompleteOriginBase_Factory","MatAutocompleteOrigin","MatAutocompleteOrigin_Factory","ɵMatAutocompleteOrigin_BaseFactory","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","pipe","_scrollStrategy","window","_getWindow","runOutsideAngular","addEventListener","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","tabOut","_getOutsideClickStream","detachments","activeItem","clickTarget","_isInsideShadowRoot","composedPath","target","formField","customOrigin","connectedTo","contains","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","disabled","keyCode","preventDefault","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","activeItemIndex","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","_a","overlayRef","_portal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_setScrollTop","_getHostElement","newScrollPosition","offsetTop","offsetHeight","_getScrollTop","_MatAutocompleteTriggerBase_Factory","autocompleteDisabled","ɵɵNgOnChangesFeature","MatAutocompleteTrigger_Factory","ɵMatAutocompleteTrigger_BaseFactory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","_handleFocus","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","_handleInput","MatAutocompleteTrigger_keydown_HostBindingHandler","_handleKeydown","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getShadowRoot } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) { return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform)); };\n_MatAutocompleteBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteBase, viewQuery: function _MatAutocompleteBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 3);\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, inputs: { displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },\n    { type: Platform }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc1.Platform }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return ɵMatAutocomplete_BaseFactory(t || MatAutocomplete); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    } }, directives: [ɵngcc2.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\nconst ɵMatAutocomplete_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n            }]\n    }], null, { optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) { return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\n_MatAutocompleteOriginBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteOriginBase });\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return ɵMatAutocompleteOrigin_BaseFactory(t || MatAutocompleteOrigin); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatAutocompleteOrigin_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        // We want to resolve this once, as late as possible so that we can be\n        // sure that the element has been moved into its final place in the DOM.\n        if (this._isInsideShadowRoot == null) {\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId() });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) { return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8)); };\n_MatAutocompleteTriggerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteTriggerBase, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc3.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return ɵMatAutocompleteTrigger_BaseFactory(t || MatAutocompleteTrigger); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatAutocompleteTrigger_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule\n        ], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule]; }, exports: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map"]},"metadata":{},"sourceType":"module"}