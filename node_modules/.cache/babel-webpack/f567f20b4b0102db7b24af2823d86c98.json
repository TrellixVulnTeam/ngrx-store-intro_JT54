{"ast":null,"code":"import _toConsumableArray from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _assertThisInitialized from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Event object emitted by MatChip when selected or deselected. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nvar _c0 = [\"*\"];\n\nvar MatChipSelectionChange = /*#__PURE__*/_createClass(function MatChipSelectionChange(\n/** Reference to the chip that emitted the event. */\nsource,\n/** Whether the chip that emitted the event is selected. */\nselected) {\n  var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  _classCallCheck(this, MatChipSelectionChange);\n\n  this.source = source;\n  this.selected = selected;\n  this.isUserInput = isUserInput;\n});\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon'); // Boilerplate for applying mixins to MatChip.\n\n/** @docs-private */\n\nvar MatChipBase = /*#__PURE__*/_createClass(function MatChipBase(_elementRef) {\n  _classCallCheck(this, MatChipBase);\n\n  this._elementRef = _elementRef;\n});\n\nvar _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n\n\nvar MatChipAvatar = /*#__PURE__*/_createClass(function MatChipAvatar() {\n  _classCallCheck(this, MatChipAvatar);\n});\n\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n  return new (t || MatChipAvatar)();\n};\n\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_AVATAR,\n    useExisting: MatChipAvatar\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      },\n      providers: [{\n        provide: MAT_CHIP_AVATAR,\n        useExisting: MatChipAvatar\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n\n\nvar MatChipTrailingIcon = /*#__PURE__*/_createClass(function MatChipTrailingIcon() {\n  _classCallCheck(this, MatChipTrailingIcon);\n});\n\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n  return new (t || MatChipTrailingIcon)();\n};\n\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_TRAILING_ICON,\n    useExisting: MatChipTrailingIcon\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      },\n      providers: [{\n        provide: MAT_CHIP_TRAILING_ICON,\n        useExisting: MatChipTrailingIcon\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n\n\nvar MatChip = /*#__PURE__*/function (_MatChipMixinBase2) {\n  _inherits(MatChip, _MatChipMixinBase2);\n\n  var _super = _createSuper(MatChip);\n\n  function MatChip(_elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n    var _this;\n\n    _classCallCheck(this, MatChip);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    _this._ngZone = _ngZone;\n    _this._changeDetectorRef = _changeDetectorRef;\n    /** Whether the chip has focus. */\n\n    _this._hasFocus = false;\n    /** Whether the chip list is selectable */\n\n    _this.chipListSelectable = true;\n    /** Whether the chip list is in multi-selection mode. */\n\n    _this._chipListMultiple = false;\n    /** Whether the chip list as a whole is disabled. */\n\n    _this._chipListDisabled = false;\n    _this._selected = false;\n    _this._selectable = true;\n    _this._disabled = false;\n    _this._removable = true;\n    /** Emits when the chip is focused. */\n\n    _this._onFocus = new Subject();\n    /** Emits when the chip is blured. */\n\n    _this._onBlur = new Subject();\n    /** Emitted when the chip is selected or deselected. */\n\n    _this.selectionChange = new EventEmitter();\n    /** Emitted when the chip is destroyed. */\n\n    _this.destroyed = new EventEmitter();\n    /** Emitted when a chip is to be removed. */\n\n    _this.removed = new EventEmitter();\n\n    _this._addHostClassName(); // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n\n\n    _this._chipRippleTarget = _document.createElement('div');\n\n    _this._chipRippleTarget.classList.add('mat-chip-ripple');\n\n    _this._elementRef.nativeElement.appendChild(_this._chipRippleTarget);\n\n    _this._chipRipple = new RippleRenderer(_assertThisInitialized(_this), _ngZone, _this._chipRippleTarget, platform);\n\n    _this._chipRipple.setupTriggerEvents(_elementRef);\n\n    _this.rippleConfig = globalRippleOptions || {};\n    _this._animationsDisabled = animationMode === 'NoopAnimations';\n    _this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n    return _this;\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n\n\n  _createClass(MatChip, [{\n    key: \"rippleDisabled\",\n    get: function get() {\n      return this.disabled || this.disableRipple || this._animationsDisabled || !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    },\n    set: function set(value) {\n      var coercedValue = coerceBooleanProperty(value);\n\n      if (coercedValue !== this._selected) {\n        this._selected = coercedValue;\n\n        this._dispatchSelectionChange();\n      }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n    },\n    set: function set(value) {\n      this._value = value;\n    }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n\n  }, {\n    key: \"selectable\",\n    get: function get() {\n      return this._selectable && this.chipListSelectable;\n    },\n    set: function set(value) {\n      this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._chipListDisabled || this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n\n  }, {\n    key: \"removable\",\n    get: function get() {\n      return this._removable;\n    },\n    set: function set(value) {\n      this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n\n  }, {\n    key: \"ariaSelected\",\n    get: function get() {\n      // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n      // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n      return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n    }\n  }, {\n    key: \"_addHostClassName\",\n    value: function _addHostClassName() {\n      var basicChipAttrName = 'mat-basic-chip';\n      var element = this._elementRef.nativeElement;\n\n      if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n        element.classList.add(basicChipAttrName);\n        return;\n      } else {\n        element.classList.add('mat-standard-chip');\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroyed.emit({\n        chip: this\n      });\n\n      this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      if (!this._selected) {\n        this._selected = true;\n\n        this._dispatchSelectionChange();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Deselects the chip. */\n\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      if (this._selected) {\n        this._selected = false;\n\n        this._dispatchSelectionChange();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Select this chip and emit selected event */\n\n  }, {\n    key: \"selectViaInteraction\",\n    value: function selectViaInteraction() {\n      if (!this._selected) {\n        this._selected = true;\n\n        this._dispatchSelectionChange(true);\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Toggles the current selected state of this chip. */\n\n  }, {\n    key: \"toggleSelected\",\n    value: function toggleSelected() {\n      var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this._selected = !this.selected;\n\n      this._dispatchSelectionChange(isUserInput);\n\n      this._changeDetectorRef.markForCheck();\n\n      return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!this._hasFocus) {\n        this._elementRef.nativeElement.focus();\n\n        this._onFocus.next({\n          chip: this\n        });\n      }\n\n      this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this.removable) {\n        this.removed.emit({\n          chip: this\n        });\n      }\n    }\n    /** Handles click events on the chip. */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      if (this.disabled) {\n        event.preventDefault();\n      } else {\n        event.stopPropagation();\n      }\n    }\n    /** Handle custom key presses. */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case DELETE:\n        case BACKSPACE:\n          // If we are removable, remove the focused chip\n          this.remove(); // Always prevent so page navigation does not occur\n\n          event.preventDefault();\n          break;\n\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this.toggleSelected(true);\n          } // Always prevent space from scrolling the page since the list has focus\n\n\n          event.preventDefault();\n          break;\n      }\n    }\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      var _this2 = this;\n\n      // When animations are enabled, Angular may end up removing the chip from the DOM a little\n      // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n      // that moves focus not the next item. To work around the issue, we defer marking the chip\n      // as not focused until the next time the zone stabilizes.\n      this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n        _this2._ngZone.run(function () {\n          _this2._hasFocus = false;\n\n          _this2._onBlur.next({\n            chip: _this2\n          });\n        });\n      });\n    }\n  }, {\n    key: \"_dispatchSelectionChange\",\n    value: function _dispatchSelectionChange() {\n      var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.selectionChange.emit({\n        source: this,\n        isUserInput: isUserInput,\n        selected: this._selected\n      });\n    }\n  }]);\n\n  return MatChip;\n}(_MatChipMixinBase);\n\nMatChip.ɵfac = function MatChip_Factory(t) {\n  return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"],\n  hostVars: 14,\n  hostBindings: function MatChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    disabled: \"disabled\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nMatChip.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\nMatChip.propDecorators = {\n  avatar: [{\n    type: ContentChild,\n    args: [MAT_CHIP_AVATAR]\n  }],\n  trailingIcon: [{\n    type: ContentChild,\n    args: [MAT_CHIP_TRAILING_ICON]\n  }],\n  removeIcon: [{\n    type: ContentChild,\n    args: [MAT_CHIP_REMOVE]\n  }],\n  selected: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selectable: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  removable: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  removed: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n    type: Directive,\n    args: [{\n      selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\",\n      inputs: ['color', 'disableRipple', 'tabIndex'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip mat-focus-indicator',\n        '[attr.tabindex]': 'disabled ? null : tabIndex',\n        'role': 'option',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationsDisabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    avatar: [{\n      type: ContentChild,\n      args: [MAT_CHIP_AVATAR]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_TRAILING_ICON]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_REMOVE]\n    }]\n  });\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n\n\nvar MatChipRemove = /*#__PURE__*/function () {\n  function MatChipRemove(_parentChip, elementRef) {\n    _classCallCheck(this, MatChipRemove);\n\n    this._parentChip = _parentChip;\n\n    if (elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n  /** Calls the parent chip's public `remove()` method if applicable. */\n\n\n  _createClass(MatChipRemove, [{\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      var parentChip = this._parentChip;\n\n      if (parentChip.removable && !parentChip.disabled) {\n        parentChip.remove();\n      } // We need to stop event propagation because otherwise the event will bubble up to the\n      // form field and cause the `onContainerClick` method to be invoked. This method would then\n      // reset the focused chip that has been focused after chip removal. Usually the parent\n      // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n      // that the chip is being removed before the event bubbles up.\n\n\n      event.stopPropagation();\n    }\n  }]);\n\n  return MatChipRemove;\n}();\n\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n  return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_REMOVE,\n    useExisting: MatChipRemove\n  }])]\n});\n\nMatChipRemove.ctorParameters = function () {\n  return [{\n    type: MatChip\n  }, {\n    type: ElementRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick($event)'\n      },\n      providers: [{\n        provide: MAT_CHIP_REMOVE,\n        useExisting: MatChipRemove\n      }]\n    }]\n  }], function () {\n    return [{\n      type: MatChip\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for the chips module. */\n\n\nvar MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n\n/** @docs-private */\n\nvar MatChipListBase = /*#__PURE__*/_createClass(function MatChipListBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n/** @docs-private */\nngControl) {\n  _classCallCheck(this, MatChipListBase);\n\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n});\n\nvar _MatChipListMixinBase = mixinErrorState(MatChipListBase); // Increasing integer for generating unique ids for chip-list components.\n\n\nvar nextUniqueId = 0;\n/** Change event object that is emitted when the chip list value has changed. */\n\nvar MatChipListChange = /*#__PURE__*/_createClass(function MatChipListChange(\n/** Chip list that emitted the event. */\nsource,\n/** Value of the chip list when the event was emitted. */\nvalue) {\n  _classCallCheck(this, MatChipListChange);\n\n  this.source = source;\n  this.value = value;\n});\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n\n\nvar MatChipList = /*#__PURE__*/function (_MatChipListMixinBase2) {\n  _inherits(MatChipList, _MatChipListMixinBase2);\n\n  var _super2 = _createSuper(MatChipList);\n\n  function MatChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher,\n  /** @docs-private */\n  ngControl) {\n    var _this3;\n\n    _classCallCheck(this, MatChipList);\n\n    _this3 = _super2.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this3._elementRef = _elementRef;\n    _this3._changeDetectorRef = _changeDetectorRef;\n    _this3._dir = _dir;\n    _this3.ngControl = ngControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this3.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n\n    _this3._lastDestroyedChipIndex = null;\n    /** Subject that emits when the component has been destroyed. */\n\n    _this3._destroyed = new Subject();\n    /** Uid of the chip list */\n\n    _this3._uid = \"mat-chip-list-\".concat(nextUniqueId++);\n    /** Tab index for the chip list. */\n\n    _this3._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n\n    _this3._userTabIndex = null;\n    /** Function when touched */\n\n    _this3._onTouched = function () {};\n    /** Function when changed */\n\n\n    _this3._onChange = function () {};\n\n    _this3._multiple = false;\n\n    _this3._compareWith = function (o1, o2) {\n      return o1 === o2;\n    };\n\n    _this3._required = false;\n    _this3._disabled = false;\n    /** Orientation of the chip list. */\n\n    _this3.ariaOrientation = 'horizontal';\n    _this3._selectable = true;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n\n    _this3.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    _this3.valueChange = new EventEmitter();\n\n    if (_this3.ngControl) {\n      _this3.ngControl.valueAccessor = _assertThisInitialized(_this3);\n    }\n\n    return _this3;\n  }\n  /** The array of selected chips inside chip list. */\n\n\n  _createClass(MatChipList, [{\n    key: \"selected\",\n    get: function get() {\n      return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n\n  }, {\n    key: \"role\",\n    get: function get() {\n      return this.empty ? null : 'listbox';\n    }\n    /** Whether the user should be allowed to select multiple chips. */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    },\n    set: function set(value) {\n      this._multiple = coerceBooleanProperty(value);\n\n      this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n\n  }, {\n    key: \"compareWith\",\n    get: function get() {\n      return this._compareWith;\n    },\n    set: function set(fn) {\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(value) {\n      this.writeValue(value);\n      this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    },\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    },\n    set: function set(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n\n  }, {\n    key: \"focused\",\n    get: function get() {\n      return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      return !this.empty || this.focused;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n\n  }, {\n    key: \"selectable\",\n    get: function get() {\n      return this._selectable;\n    },\n    set: function set(value) {\n      var _this4 = this;\n\n      this._selectable = coerceBooleanProperty(value);\n\n      if (this.chips) {\n        this.chips.forEach(function (chip) {\n          return chip.chipListSelectable = _this4._selectable;\n        });\n      }\n    }\n  }, {\n    key: \"tabIndex\",\n    set: function set(value) {\n      this._userTabIndex = value;\n      this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n\n  }, {\n    key: \"chipSelectionChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip.selectionChange;\n      })));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n\n  }, {\n    key: \"chipFocusChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip._onFocus;\n      })));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n\n  }, {\n    key: \"chipBlurChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip._onBlur;\n      })));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n\n  }, {\n    key: \"chipRemoveChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip.destroyed;\n      })));\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this5 = this;\n\n      this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHomeAndEnd().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n      if (this._dir) {\n        this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(function (dir) {\n          return _this5._keyManager.withHorizontalOrientation(dir);\n        });\n      }\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(function () {\n        _this5._allowFocusEscape();\n      }); // When the list changes, re-subscribe\n\n\n      this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(function () {\n        if (_this5.disabled) {\n          // Since this happens after the content has been\n          // checked, we need to defer it to the next tick.\n          Promise.resolve().then(function () {\n            _this5._syncChipsState();\n          });\n        }\n\n        _this5._resetChips(); // Reset chips selected/deselected status\n\n\n        _this5._initializeSelection(); // Check to see if we need to update our tab index\n\n\n        _this5._updateTabIndex(); // Check to see if we have a destroyed chip and need to refocus\n\n\n        _this5._updateFocusForDestroyedChips();\n\n        _this5.stateChanges.next();\n      });\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n      this.stateChanges.next();\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n\n        if (this.ngControl.disabled !== this._disabled) {\n          this.disabled = !!this.ngControl.disabled;\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this.stateChanges.complete();\n\n      this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n\n  }, {\n    key: \"registerInput\",\n    value: function registerInput(inputElement) {\n      this._chipInput = inputElement; // We use this attribute to match the chip list to its input in test harnesses.\n      // Set the attribute directly here to avoid \"changed after checked\" errors.\n\n      this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      if (this.chips) {\n        this._setSelectionByValue(value, false);\n      }\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick(event) {\n      if (!this._originatesFromChip(event)) {\n        this.focus();\n      }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      if (this.disabled) {\n        return;\n      } // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n      // Focus on first element if there's no chipInput inside chip-list\n\n\n      if (this._chipInput && this._chipInput.focused) {// do nothing\n      } else if (this.chips.length > 0) {\n        this._keyManager.setFirstItemActive();\n\n        this.stateChanges.next();\n      } else {\n        this._focusInput(options);\n\n        this.stateChanges.next();\n      }\n    }\n    /** Attempt to focus an input if we have one. */\n\n  }, {\n    key: \"_focusInput\",\n    value: function _focusInput(options) {\n      if (this._chipInput) {\n        this._chipInput.focus(options);\n      }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      var target = event.target; // If they are on an empty input and hit backspace, focus the last chip\n\n      if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n        this._keyManager.setLastItemActive();\n\n        event.preventDefault();\n      } else if (target && target.classList.contains('mat-chip')) {\n        this._keyManager.onKeydown(event);\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n\n  }, {\n    key: \"_updateTabIndex\",\n    value: function _updateTabIndex() {\n      // If we have 0 chips, we should not allow keyboard focus\n      this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n\n  }, {\n    key: \"_updateFocusForDestroyedChips\",\n    value: function _updateFocusForDestroyedChips() {\n      // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n      if (this._lastDestroyedChipIndex != null) {\n        if (this.chips.length) {\n          var newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n\n          this._keyManager.setActiveItem(newChipIndex);\n        } else {\n          this.focus();\n        }\n      }\n\n      this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n\n  }, {\n    key: \"_isValidIndex\",\n    value: function _isValidIndex(index) {\n      return index >= 0 && index < this.chips.length;\n    }\n  }, {\n    key: \"_isInputEmpty\",\n    value: function _isInputEmpty(element) {\n      if (element && element.nodeName.toLowerCase() === 'input') {\n        var input = element;\n        return !input.value;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this6 = this;\n\n      var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      this._clearSelection();\n\n      this.chips.forEach(function (chip) {\n        return chip.deselect();\n      });\n\n      if (Array.isArray(value)) {\n        value.forEach(function (currentValue) {\n          return _this6._selectValue(currentValue, isUserInput);\n        });\n\n        this._sortValues();\n      } else {\n        var correspondingChip = this._selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what chip the user interacted with last.\n\n\n        if (correspondingChip) {\n          if (isUserInput) {\n            this._keyManager.setActiveItem(correspondingChip);\n          }\n        }\n      }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      var _this7 = this;\n\n      var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var correspondingChip = this.chips.find(function (chip) {\n        return chip.value != null && _this7._compareWith(chip.value, value);\n      });\n\n      if (correspondingChip) {\n        isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n\n        this._selectionModel.select(correspondingChip);\n      }\n\n      return correspondingChip;\n    }\n  }, {\n    key: \"_initializeSelection\",\n    value: function _initializeSelection() {\n      var _this8 = this;\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(function () {\n        if (_this8.ngControl || _this8._value) {\n          _this8._setSelectionByValue(_this8.ngControl ? _this8.ngControl.value : _this8._value, false);\n\n          _this8.stateChanges.next();\n        }\n      });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection(skip) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(function (chip) {\n        if (chip !== skip) {\n          chip.deselect();\n        }\n      });\n      this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n\n  }, {\n    key: \"_sortValues\",\n    value: function _sortValues() {\n      var _this9 = this;\n\n      if (this._multiple) {\n        this._selectionModel.clear();\n\n        this.chips.forEach(function (chip) {\n          if (chip.selected) {\n            _this9._selectionModel.select(chip);\n          }\n        });\n        this.stateChanges.next();\n      }\n    }\n    /** Emits change event to set the model value. */\n\n  }, {\n    key: \"_propagateChanges\",\n    value: function _propagateChanges(fallbackValue) {\n      var valueToEmit = null;\n\n      if (Array.isArray(this.selected)) {\n        valueToEmit = this.selected.map(function (chip) {\n          return chip.value;\n        });\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.change.emit(new MatChipListChange(this, valueToEmit));\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      var _this10 = this;\n\n      if (!this._hasFocusedChip()) {\n        this._keyManager.setActiveItem(-1);\n      }\n\n      if (!this.disabled) {\n        if (this._chipInput) {\n          // If there's a chip input, we should check whether the focus moved to chip input.\n          // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n          // to chip input, do nothing.\n          // Timeout is needed to wait for the focus() event trigger on chip input.\n          setTimeout(function () {\n            if (!_this10.focused) {\n              _this10._markAsTouched();\n            }\n          });\n        } else {\n          // If there's no chip input, then mark the field as touched.\n          this._markAsTouched();\n        }\n      }\n    }\n    /** Mark the field as touched */\n\n  }, {\n    key: \"_markAsTouched\",\n    value: function _markAsTouched() {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n\n  }, {\n    key: \"_allowFocusEscape\",\n    value: function _allowFocusEscape() {\n      var _this11 = this;\n\n      if (this._tabIndex !== -1) {\n        this._tabIndex = -1;\n        setTimeout(function () {\n          _this11._tabIndex = _this11._userTabIndex || 0;\n\n          _this11._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n  }, {\n    key: \"_resetChips\",\n    value: function _resetChips() {\n      this._dropSubscriptions();\n\n      this._listenToChipsFocus();\n\n      this._listenToChipsSelection();\n\n      this._listenToChipsRemoved();\n    }\n  }, {\n    key: \"_dropSubscriptions\",\n    value: function _dropSubscriptions() {\n      if (this._chipFocusSubscription) {\n        this._chipFocusSubscription.unsubscribe();\n\n        this._chipFocusSubscription = null;\n      }\n\n      if (this._chipBlurSubscription) {\n        this._chipBlurSubscription.unsubscribe();\n\n        this._chipBlurSubscription = null;\n      }\n\n      if (this._chipSelectionSubscription) {\n        this._chipSelectionSubscription.unsubscribe();\n\n        this._chipSelectionSubscription = null;\n      }\n\n      if (this._chipRemoveSubscription) {\n        this._chipRemoveSubscription.unsubscribe();\n\n        this._chipRemoveSubscription = null;\n      }\n    }\n    /** Listens to user-generated selection events on each chip. */\n\n  }, {\n    key: \"_listenToChipsSelection\",\n    value: function _listenToChipsSelection() {\n      var _this12 = this;\n\n      this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(function (event) {\n        event.source.selected ? _this12._selectionModel.select(event.source) : _this12._selectionModel.deselect(event.source); // For single selection chip list, make sure the deselected value is unselected.\n\n        if (!_this12.multiple) {\n          _this12.chips.forEach(function (chip) {\n            if (!_this12._selectionModel.isSelected(chip) && chip.selected) {\n              chip.deselect();\n            }\n          });\n        }\n\n        if (event.isUserInput) {\n          _this12._propagateChanges();\n        }\n      });\n    }\n    /** Listens to user-generated selection events on each chip. */\n\n  }, {\n    key: \"_listenToChipsFocus\",\n    value: function _listenToChipsFocus() {\n      var _this13 = this;\n\n      this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n        var chipIndex = _this13.chips.toArray().indexOf(event.chip);\n\n        if (_this13._isValidIndex(chipIndex)) {\n          _this13._keyManager.updateActiveItem(chipIndex);\n        }\n\n        _this13.stateChanges.next();\n      });\n      this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n        _this13._blur();\n\n        _this13.stateChanges.next();\n      });\n    }\n  }, {\n    key: \"_listenToChipsRemoved\",\n    value: function _listenToChipsRemoved() {\n      var _this14 = this;\n\n      this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(function (event) {\n        var chip = event.chip;\n\n        var chipIndex = _this14.chips.toArray().indexOf(event.chip); // In case the chip that will be removed is currently focused, we temporarily store\n        // the index in order to be able to determine an appropriate sibling chip that will\n        // receive focus.\n\n\n        if (_this14._isValidIndex(chipIndex) && chip._hasFocus) {\n          _this14._lastDestroyedChipIndex = chipIndex;\n        }\n      });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n\n  }, {\n    key: \"_originatesFromChip\",\n    value: function _originatesFromChip(event) {\n      var currentElement = event.target;\n\n      while (currentElement && currentElement !== this._elementRef.nativeElement) {\n        if (currentElement.classList.contains('mat-chip')) {\n          return true;\n        }\n\n        currentElement = currentElement.parentElement;\n      }\n\n      return false;\n    }\n    /** Checks whether any of the chips is focused. */\n\n  }, {\n    key: \"_hasFocusedChip\",\n    value: function _hasFocusedChip() {\n      return this.chips && this.chips.some(function (chip) {\n        return chip._hasFocus;\n      });\n    }\n    /** Syncs the list's state with the individual chips. */\n\n  }, {\n    key: \"_syncChipsState\",\n    value: function _syncChipsState() {\n      var _this15 = this;\n\n      if (this.chips) {\n        this.chips.forEach(function (chip) {\n          chip._chipListDisabled = _this15._disabled;\n          chip._chipListMultiple = _this15.multiple;\n        });\n      }\n    }\n  }]);\n\n  return MatChipList;\n}(_MatChipListMixinBase);\n\nMatChipList.ɵfac = function MatChipList_Factory(t) {\n  return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n};\n\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 15,\n  hostBindings: function MatChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatChipList\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatChipList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }]\n  }];\n};\n\nMatChipList.propDecorators = {\n  errorStateMatcher: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ariaOrientation: [{\n    type: Input,\n    args: ['aria-orientation']\n  }],\n  selectable: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  chips: [{\n    type: ContentChildren,\n    args: [MatChip, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: \"<div class=\\\"mat-chip-list-wrapper\\\"><ng-content></ng-content></div>\",\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-required]': 'role ? required : null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatChipList\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.ErrorStateMatcher\n    }, {\n      type: ɵngcc3.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatChip, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\n\n\nvar nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n\nvar MatChipInput = /*#__PURE__*/function () {\n  function MatChipInput(_elementRef, _defaultOptions) {\n    _classCallCheck(this, MatChipInput);\n\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /** Whether the control is focused. */\n\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /** Emitted when a chip is to be added. */\n\n    this.chipEnd = new EventEmitter();\n    /** The input's placeholder text. */\n\n    this.placeholder = '';\n    /** Unique id for the input. */\n\n    this.id = \"mat-chip-list-input-\".concat(nextUniqueId$1++);\n    this._disabled = false;\n    this._inputElement = this._elementRef.nativeElement;\n  }\n  /** Register input for chip list */\n\n\n  _createClass(MatChipInput, [{\n    key: \"chipList\",\n    set: function set(value) {\n      if (value) {\n        this._chipList = value;\n\n        this._chipList.registerInput(this);\n      }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n\n  }, {\n    key: \"addOnBlur\",\n    get: function get() {\n      return this._addOnBlur;\n    },\n    set: function set(value) {\n      this._addOnBlur = coerceBooleanProperty(value);\n    }\n    /** Whether the input is disabled. */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this._chipList && this._chipList.disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /** Whether the input is empty. */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._inputElement.value;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._chipList.stateChanges.next();\n    }\n    /** Utility method to make host definition/tests more clear. */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n      // want to do this when going backwards, because focus should go back to the first chip.\n      if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n        this._chipList._allowFocusEscape();\n      }\n\n      this._emitChipEnd(event);\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      if (this.addOnBlur) {\n        this._emitChipEnd();\n      }\n\n      this.focused = false; // Blur the chip list if it is not focused\n\n      if (!this._chipList.focused) {\n        this._chipList._blur();\n      }\n\n      this._chipList.stateChanges.next();\n    }\n  }, {\n    key: \"_focus\",\n    value: function _focus() {\n      this.focused = true;\n\n      this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n\n  }, {\n    key: \"_emitChipEnd\",\n    value: function _emitChipEnd(event) {\n      if (!this._inputElement.value && !!event) {\n        this._chipList._keydown(event);\n      }\n\n      if (!event || this._isSeparatorKey(event)) {\n        this.chipEnd.emit({\n          input: this._inputElement,\n          value: this._inputElement.value\n        });\n\n        if (event) {\n          event.preventDefault();\n        }\n      }\n    }\n  }, {\n    key: \"_onInput\",\n    value: function _onInput() {\n      // Let chip list know whenever the value changes.\n      this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this._inputElement.focus(options);\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n\n  }, {\n    key: \"_isSeparatorKey\",\n    value: function _isSeparatorKey(event) {\n      return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n  }]);\n\n  return MatChipInput;\n}();\n\nMatChipInput.ɵfac = function MatChipInput_Factory(t) {\n  return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n};\n\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 5,\n  hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    }\n  },\n  inputs: {\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n    disabled: \"disabled\"\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMatChipInput.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_CHIPS_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatChipInput.propDecorators = {\n  chipList: [{\n    type: Input,\n    args: ['matChipInputFor']\n  }],\n  addOnBlur: [{\n    type: Input,\n    args: ['matChipInputAddOnBlur']\n  }],\n  separatorKeyCodes: [{\n    type: Input,\n    args: ['matChipInputSeparatorKeyCodes']\n  }],\n  chipEnd: [{\n    type: Output,\n    args: ['matChipInputTokenEnd']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n        '[attr.aria-required]': '_chipList && _chipList.required || null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nvar ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\n\nvar MatChipsModule = /*#__PURE__*/_createClass(function MatChipsModule() {\n  _classCallCheck(this, MatChipsModule);\n});\n\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n  return new (t || MatChipsModule)();\n};\n\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatChipsModule\n});\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher, {\n    provide: MAT_CHIPS_DEFAULT_OPTIONS,\n    useValue: ɵ0\n  }],\n  imports: [[MatCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: function declarations() {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    },\n    imports: function imports() {\n      return [MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue: ɵ0\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 }; //# sourceMappingURL=chips.js.map","map":{"version":3,"sources":["/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js"],"names":["SPACE","BACKSPACE","DELETE","TAB","hasModifierKey","ENTER","InjectionToken","Directive","EventEmitter","ElementRef","NgZone","Optional","Inject","ChangeDetectorRef","Attribute","ContentChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Self","ContentChildren","NgModule","mixinTabIndex","mixinColor","mixinDisableRipple","RippleRenderer","MAT_RIPPLE_GLOBAL_OPTIONS","mixinErrorState","ErrorStateMatcher","MatCommonModule","coerceBooleanProperty","Platform","DOCUMENT","ANIMATION_MODULE_TYPE","Subject","merge","take","takeUntil","startWith","FocusKeyManager","Directionality","SelectionModel","NgForm","FormGroupDirective","NgControl","MatFormFieldControl","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_c0","MatChipSelectionChange","source","selected","isUserInput","MAT_CHIP_REMOVE","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","features","ɵɵProvidersFeature","provide","useExisting","ngDevMode","ɵsetClassMetadata","args","selector","host","providers","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_disabled","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","nativeElement","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","disabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","textContent","selectable","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","emit","chip","_removeTriggerEvents","markForCheck","focus","next","removable","event","preventDefault","stopPropagation","keyCode","remove","toggleSelected","onStable","pipe","subscribe","run","MatChip_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","ɵɵlistener","MatChip_click_HostBindingHandler","$event","_handleClick","MatChip_keydown_HostBindingHandler","_handleKeydown","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","_blur","ɵɵattribute","ariaSelected","ɵɵclassProp","inputs","color","outputs","exportAs","ɵɵInheritDefinitionFeature","ctorParameters","decorators","String","propDecorators","MatChipRemove","_parentChip","elementRef","nodeName","setAttribute","parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","nextUniqueId","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","empty","_syncChipsState","fn","_initializeSelection","writeValue","_chipInput","id","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","forEach","map","_keyManager","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","updateErrorState","complete","_dropSubscriptions","inputElement","ids","_ariaDescribedby","join","_setSelectionByValue","isDisabled","_originatesFromChip","options","setFirstItemActive","_focusInput","target","_isInputEmpty","setLastItemActive","contains","onKeydown","newChipIndex","Math","min","setActiveItem","index","input","_clearSelection","deselect","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","selectViaInteraction","select","skip","clear","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","chipIndex","toArray","indexOf","_isValidIndex","updateActiveItem","chipBlurChanges","chipRemoveChanges","currentElement","parentElement","some","MatChipList_Factory","ɵcmp","ɵɵdefineComponent","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","_keydown","ɵɵhostProperty","role","required","errorState","compareWith","errorStateMatcher","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","descendants","None","OnPush","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","_chipList","registerInput","_emitChipEnd","addOnBlur","_isSeparatorKey","Set","has","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","_focus","MatChipInput_input_HostBindingHandler","_onInput","invalid","chipList","ɵɵNgOnChangesFeature","CHIP_DECLARATIONS","ɵ0","MatChipsModule","MatChipsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useValue","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":";;;;;;AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,GAAnC,EAAwCC,cAAxC,EAAwDC,KAAxD,QAAqE,uBAArE;AACA,SAASC,cAAT,EAAyBC,SAAzB,EAAoCC,YAApC,EAAkDC,UAAlD,EAA8DC,MAA9D,EAAsEC,QAAtE,EAAgFC,MAAhF,EAAwFC,iBAAxF,EAA2GC,SAA3G,EAAsHC,YAAtH,EAAoIC,KAApI,EAA2IC,MAA3I,EAAmJC,SAAnJ,EAA8JC,iBAA9J,EAAiLC,uBAAjL,EAA0MC,IAA1M,EAAgNC,eAAhN,EAAiOC,QAAjO,QAAiP,eAAjP;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,kBAApC,EAAwDC,cAAxD,EAAwEC,yBAAxE,EAAmGC,eAAnG,EAAoHC,iBAApH,EAAuIC,eAAvI,QAA8J,wBAA9J;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,MAA/B;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,SAA1B,QAA2C,gBAA3C;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,MAAT,EAAiBC,kBAAjB,EAAqCC,SAArC,QAAsD,gBAAtD;AACA,SAASC,mBAAT,QAAoC,8BAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AAEA,IAAMC,GAAG,GAAG,CAAC,GAAD,CAAZ;;IACMC,sB,6BACF;AACA;AACAC,MAFA;AAGA;AACAC,QAJA,EAMqB;AAAA,MAArBC,WAAqB,uEAAP,KAAO;;AAAA;;AACjB,OAAKF,MAAL,GAAcA,MAAd;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACA,OAAKC,WAAL,GAAmBA,WAAnB;AACH,C;AAEL;AACA;AACA;AACA;AACA;;;AACA,IAAMC,eAAe,GAAG,IAAIpD,cAAJ,CAAmB,eAAnB,CAAxB;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMqD,eAAe,GAAG,IAAIrD,cAAJ,CAAmB,eAAnB,CAAxB;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMsD,sBAAsB,GAAG,IAAItD,cAAJ,CAAmB,qBAAnB,CAA/B,C,CACA;;AACA;;IACMuD,W,6BACF,qBAAYC,WAAZ,EAAyB;AAAA;;AACrB,OAAKA,WAAL,GAAmBA,WAAnB;AACH,C;;AAEL,IAAMC,iBAAiB,GAAGvC,aAAa,CAACC,UAAU,CAACC,kBAAkB,CAACmC,WAAD,CAAnB,EAAkC,SAAlC,CAAX,EAAyD,CAAC,CAA1D,CAAvC;AACA;AACA;AACA;AACA;;;IACMG,a;;;;AAENA,aAAa,CAACC,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAIH,aAAV,GAAP;AAAoC,CAA7F;;AACAA,aAAa,CAACI,IAAd,GAAqBpB,MAAM,CAACqB,iBAAP,CAAyB;AAAEC,EAAAA,IAAI,EAAEN,aAAR;AAAuBO,EAAAA,SAAS,EAAE,CAAC,CAAC,iBAAD,CAAD,EAAsB,CAAC,EAAD,EAAK,eAAL,EAAsB,EAAtB,CAAtB,CAAlC;AAAoFC,EAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,iBAAJ,CAA/F;AAAuHC,EAAAA,QAAQ,EAAE,CAACzB,MAAM,CAAC0B,kBAAP,CAA0B,CAAC;AAAEC,IAAAA,OAAO,EAAEhB,eAAX;AAA4BiB,IAAAA,WAAW,EAAEZ;AAAzC,GAAD,CAA1B,CAAD;AAAjI,CAAzB,CAArB;;AACA,CAAC,YAAY;AAAE,GAAC,OAAOa,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7B,MAAM,CAAC8B,iBAAP,CAAyBd,aAAzB,EAAwC,CAAC;AACnGM,IAAAA,IAAI,EAAE/D,SAD6F;AAEnGwE,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,kCADX;AAECC,MAAAA,IAAI,EAAE;AAAE,iBAAS;AAAX,OAFP;AAGCC,MAAAA,SAAS,EAAE,CAAC;AAAEP,QAAAA,OAAO,EAAEhB,eAAX;AAA4BiB,QAAAA,WAAW,EAAEZ;AAAzC,OAAD;AAHZ,KAAD;AAF6F,GAAD,CAAxC,EAO1D,IAP0D,EAOpD,IAPoD,CAAnD;AAOO,CAPtB;AAQA;AACA;AACA;AACA;;;IACMmB,mB;;;;AAENA,mBAAmB,CAAClB,IAApB,GAA2B,SAASmB,2BAAT,CAAqCjB,CAArC,EAAwC;AAAE,SAAO,KAAKA,CAAC,IAAIgB,mBAAV,GAAP;AAA0C,CAA/G;;AACAA,mBAAmB,CAACf,IAApB,GAA2BpB,MAAM,CAACqB,iBAAP,CAAyB;AAAEC,EAAAA,IAAI,EAAEa,mBAAR;AAA6BZ,EAAAA,SAAS,EAAE,CAAC,CAAC,wBAAD,CAAD,EAA6B,CAAC,EAAD,EAAK,qBAAL,EAA4B,EAA5B,CAA7B,CAAxC;AAAuGC,EAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,wBAAJ,CAAlH;AAAiJC,EAAAA,QAAQ,EAAE,CAACzB,MAAM,CAAC0B,kBAAP,CAA0B,CAAC;AAAEC,IAAAA,OAAO,EAAEf,sBAAX;AAAmCgB,IAAAA,WAAW,EAAEO;AAAhD,GAAD,CAA1B,CAAD;AAA3J,CAAzB,CAA3B;;AACA,CAAC,YAAY;AAAE,GAAC,OAAON,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7B,MAAM,CAAC8B,iBAAP,CAAyBK,mBAAzB,EAA8C,CAAC;AACzGb,IAAAA,IAAI,EAAE/D,SADmG;AAEzGwE,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,+CADX;AAECC,MAAAA,IAAI,EAAE;AAAE,iBAAS;AAAX,OAFP;AAGCC,MAAAA,SAAS,EAAE,CAAC;AAAEP,QAAAA,OAAO,EAAEf,sBAAX;AAAmCgB,QAAAA,WAAW,EAAEO;AAAhD,OAAD;AAHZ,KAAD;AAFmG,GAAD,CAA9C,EAO1D,IAP0D,EAOpD,IAPoD,CAAnD;AAOO,CAPtB;AAQA;AACA;AACA;;;IACME,O;;;;;AACF,mBAAYvB,WAAZ,EAAyBwB,OAAzB,EAAkCC,QAAlC,EAA4CC,mBAA5C,EAAiEC,kBAAjE,EAAqFC,SAArF,EAAgGC,aAAhG,EAA+GC,QAA/G,EAAyH;AAAA;;AAAA;;AACrH,8BAAM9B,WAAN;AACA,UAAKA,WAAL,GAAmBA,WAAnB;AACA,UAAKwB,OAAL,GAAeA,OAAf;AACA,UAAKG,kBAAL,GAA0BA,kBAA1B;AACA;;AACA,UAAKI,SAAL,GAAiB,KAAjB;AACA;;AACA,UAAKC,kBAAL,GAA0B,IAA1B;AACA;;AACA,UAAKC,iBAAL,GAAyB,KAAzB;AACA;;AACA,UAAKC,iBAAL,GAAyB,KAAzB;AACA,UAAKC,SAAL,GAAiB,KAAjB;AACA,UAAKC,WAAL,GAAmB,IAAnB;AACA,UAAKC,SAAL,GAAiB,KAAjB;AACA,UAAKC,UAAL,GAAkB,IAAlB;AACA;;AACA,UAAKC,QAAL,GAAgB,IAAIjE,OAAJ,EAAhB;AACA;;AACA,UAAKkE,OAAL,GAAe,IAAIlE,OAAJ,EAAf;AACA;;AACA,UAAKmE,eAAL,GAAuB,IAAI/F,YAAJ,EAAvB;AACA;;AACA,UAAKgG,SAAL,GAAiB,IAAIhG,YAAJ,EAAjB;AACA;;AACA,UAAKiG,OAAL,GAAe,IAAIjG,YAAJ,EAAf;;AACA,UAAKkG,iBAAL,GA3BqH,CA4BrH;AACA;AACA;;;AACA,UAAKC,iBAAL,GAAyBjB,SAAS,CAACkB,aAAV,CAAwB,KAAxB,CAAzB;;AACA,UAAKD,iBAAL,CAAuBE,SAAvB,CAAiCC,GAAjC,CAAqC,iBAArC;;AACA,UAAKhD,WAAL,CAAiBiD,aAAjB,CAA+BC,WAA/B,CAA2C,MAAKL,iBAAhD;;AACA,UAAKM,WAAL,GAAmB,IAAItF,cAAJ,gCAAyB2D,OAAzB,EAAkC,MAAKqB,iBAAvC,EAA0DpB,QAA1D,CAAnB;;AACA,UAAK0B,WAAL,CAAiBC,kBAAjB,CAAoCpD,WAApC;;AACA,UAAKqD,YAAL,GAAoB3B,mBAAmB,IAAI,EAA3C;AACA,UAAK4B,mBAAL,GAA2BzB,aAAa,KAAK,gBAA7C;AACA,UAAKC,QAAL,GAAgBA,QAAQ,IAAI,IAAZ,GAAoByB,QAAQ,CAACzB,QAAD,CAAR,IAAsB,CAAC,CAA3C,GAAgD,CAAC,CAAjE;AAtCqH;AAuCxH;AACD;AACJ;AACA;AACA;;;;;SACI,eAAqB;AACjB,aAAO,KAAK0B,QAAL,IAAiB,KAAKC,aAAtB,IAAuC,KAAKH,mBAA5C,IACH,CAAC,CAAC,KAAKD,YAAL,CAAkBG,QADxB;AAEH;AACD;;;;SACA,eAAe;AAAE,aAAO,KAAKrB,SAAZ;AAAwB,K;SACzC,aAAauB,KAAb,EAAoB;AAChB,UAAMC,YAAY,GAAGzF,qBAAqB,CAACwF,KAAD,CAA1C;;AACA,UAAIC,YAAY,KAAK,KAAKxB,SAA1B,EAAqC;AACjC,aAAKA,SAAL,GAAiBwB,YAAjB;;AACA,aAAKC,wBAAL;AACH;AACJ;AACD;;;;SACA,eAAY;AACR,aAAO,KAAKC,MAAL,KAAgBC,SAAhB,GACD,KAAKD,MADJ,GAED,KAAK7D,WAAL,CAAiBiD,aAAjB,CAA+Bc,WAFrC;AAGH,K;SACD,aAAUL,KAAV,EAAiB;AAAE,WAAKG,MAAL,GAAcH,KAAd;AAAsB;AACzC;AACJ;AACA;AACA;AACA;AACA;;;;SACI,eAAiB;AAAE,aAAO,KAAKtB,WAAL,IAAoB,KAAKJ,kBAAhC;AAAqD,K;SACxE,aAAe0B,KAAf,EAAsB;AAClB,WAAKtB,WAAL,GAAmBlE,qBAAqB,CAACwF,KAAD,CAAxC;AACH;AACD;;;;SACA,eAAe;AAAE,aAAO,KAAKxB,iBAAL,IAA0B,KAAKG,SAAtC;AAAkD,K;SACnE,aAAaqB,KAAb,EAAoB;AAChB,WAAKrB,SAAL,GAAiBnE,qBAAqB,CAACwF,KAAD,CAAtC;AACH;AACD;AACJ;AACA;;;;SACI,eAAgB;AAAE,aAAO,KAAKpB,UAAZ;AAAyB,K;SAC3C,aAAcoB,KAAd,EAAqB;AACjB,WAAKpB,UAAL,GAAkBpE,qBAAqB,CAACwF,KAAD,CAAvC;AACH;AACD;;;;SACA,eAAmB;AACf;AACA;AACA,aAAO,KAAKM,UAAL,KAAoB,KAAK/B,iBAAL,IAA0B,KAAKvC,QAAnD,IACH,KAAKA,QAAL,CAAcuE,QAAd,EADG,GACwB,IAD/B;AAEH;;;WACD,6BAAoB;AAChB,UAAMC,iBAAiB,GAAG,gBAA1B;AACA,UAAMC,OAAO,GAAG,KAAKnE,WAAL,CAAiBiD,aAAjC;;AACA,UAAIkB,OAAO,CAACC,YAAR,CAAqBF,iBAArB,KACAC,OAAO,CAACE,OAAR,CAAgBC,WAAhB,OAAkCJ,iBADtC,EACyD;AACrDC,QAAAA,OAAO,CAACpB,SAAR,CAAkBC,GAAlB,CAAsBkB,iBAAtB;AACA;AACH,OAJD,MAKK;AACDC,QAAAA,OAAO,CAACpB,SAAR,CAAkBC,GAAlB,CAAsB,mBAAtB;AACH;AACJ;;;WACD,uBAAc;AACV,WAAKN,SAAL,CAAe6B,IAAf,CAAoB;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAApB;;AACA,WAAKrB,WAAL,CAAiBsB,oBAAjB;AACH;AACD;;;;WACA,kBAAS;AACL,UAAI,CAAC,KAAKtC,SAAV,EAAqB;AACjB,aAAKA,SAAL,GAAiB,IAAjB;;AACA,aAAKyB,wBAAL;;AACA,aAAKjC,kBAAL,CAAwB+C,YAAxB;AACH;AACJ;AACD;;;;WACA,oBAAW;AACP,UAAI,KAAKvC,SAAT,EAAoB;AAChB,aAAKA,SAAL,GAAiB,KAAjB;;AACA,aAAKyB,wBAAL;;AACA,aAAKjC,kBAAL,CAAwB+C,YAAxB;AACH;AACJ;AACD;;;;WACA,gCAAuB;AACnB,UAAI,CAAC,KAAKvC,SAAV,EAAqB;AACjB,aAAKA,SAAL,GAAiB,IAAjB;;AACA,aAAKyB,wBAAL,CAA8B,IAA9B;;AACA,aAAKjC,kBAAL,CAAwB+C,YAAxB;AACH;AACJ;AACD;;;;WACA,0BAAoC;AAAA,UAArB/E,WAAqB,uEAAP,KAAO;AAChC,WAAKwC,SAAL,GAAiB,CAAC,KAAKzC,QAAvB;;AACA,WAAKkE,wBAAL,CAA8BjE,WAA9B;;AACA,WAAKgC,kBAAL,CAAwB+C,YAAxB;;AACA,aAAO,KAAKhF,QAAZ;AACH;AACD;;;;WACA,iBAAQ;AACJ,UAAI,CAAC,KAAKqC,SAAV,EAAqB;AACjB,aAAK/B,WAAL,CAAiBiD,aAAjB,CAA+B0B,KAA/B;;AACA,aAAKpC,QAAL,CAAcqC,IAAd,CAAmB;AAAEJ,UAAAA,IAAI,EAAE;AAAR,SAAnB;AACH;;AACD,WAAKzC,SAAL,GAAiB,IAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,kBAAS;AACL,UAAI,KAAK8C,SAAT,EAAoB;AAChB,aAAKlC,OAAL,CAAa4B,IAAb,CAAkB;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAlB;AACH;AACJ;AACD;;;;WACA,sBAAaM,KAAb,EAAoB;AAChB,UAAI,KAAKtB,QAAT,EAAmB;AACfsB,QAAAA,KAAK,CAACC,cAAN;AACH,OAFD,MAGK;AACDD,QAAAA,KAAK,CAACE,eAAN;AACH;AACJ;AACD;;;;WACA,wBAAeF,KAAf,EAAsB;AAClB,UAAI,KAAKtB,QAAT,EAAmB;AACf;AACH;;AACD,cAAQsB,KAAK,CAACG,OAAd;AACI,aAAK7I,MAAL;AACA,aAAKD,SAAL;AACI;AACA,eAAK+I,MAAL,GAFJ,CAGI;;AACAJ,UAAAA,KAAK,CAACC,cAAN;AACA;;AACJ,aAAK7I,KAAL;AACI;AACA,cAAI,KAAK8H,UAAT,EAAqB;AACjB,iBAAKmB,cAAL,CAAoB,IAApB;AACH,WAJL,CAKI;;;AACAL,UAAAA,KAAK,CAACC,cAAN;AACA;AAfR;AAiBH;;;WACD,iBAAQ;AAAA;;AACJ;AACA;AACA;AACA;AACA,WAAKvD,OAAL,CAAa4D,QAAb,CACKC,IADL,CACU7G,IAAI,CAAC,CAAD,CADd,EAEK8G,SAFL,CAEe,YAAM;AACjB,QAAA,MAAI,CAAC9D,OAAL,CAAa+D,GAAb,CAAiB,YAAM;AACnB,UAAA,MAAI,CAACxD,SAAL,GAAiB,KAAjB;;AACA,UAAA,MAAI,CAACS,OAAL,CAAaoC,IAAb,CAAkB;AAAEJ,YAAAA,IAAI,EAAE;AAAR,WAAlB;AACH,SAHD;AAIH,OAPD;AAQH;;;WACD,oCAA8C;AAAA,UAArB7E,WAAqB,uEAAP,KAAO;AAC1C,WAAK8C,eAAL,CAAqB8B,IAArB,CAA0B;AACtB9E,QAAAA,MAAM,EAAE,IADc;AAEtBE,QAAAA,WAAW,EAAXA,WAFsB;AAGtBD,QAAAA,QAAQ,EAAE,KAAKyC;AAHO,OAA1B;AAKH;;;;EApNiBlC,iB;;AAsNtBsB,OAAO,CAACpB,IAAR,GAAe,SAASqF,eAAT,CAAyBnF,CAAzB,EAA4B;AAAE,SAAO,KAAKA,CAAC,IAAIkB,OAAV,EAAmBrC,MAAM,CAACuG,iBAAP,CAAyBvG,MAAM,CAACvC,UAAhC,CAAnB,EAAgEuC,MAAM,CAACuG,iBAAP,CAAyBvG,MAAM,CAACtC,MAAhC,CAAhE,EAAyGsC,MAAM,CAACuG,iBAAP,CAAyBtG,MAAM,CAAChB,QAAhC,CAAzG,EAAoJe,MAAM,CAACuG,iBAAP,CAAyB3H,yBAAzB,EAAoD,CAApD,CAApJ,EAA4MoB,MAAM,CAACuG,iBAAP,CAAyBvG,MAAM,CAACnC,iBAAhC,CAA5M,EAAgQmC,MAAM,CAACuG,iBAAP,CAAyBrH,QAAzB,CAAhQ,EAAoSc,MAAM,CAACuG,iBAAP,CAAyBpH,qBAAzB,EAAgD,CAAhD,CAApS,EAAwVa,MAAM,CAACwG,iBAAP,CAAyB,UAAzB,CAAxV,CAAP;AAAuY,CAApb;;AACAnE,OAAO,CAACjB,IAAR,GAAepB,MAAM,CAACqB,iBAAP,CAAyB;AAAEC,EAAAA,IAAI,EAAEe,OAAR;AAAiBd,EAAAA,SAAS,EAAE,CAAC,CAAC,gBAAD,CAAD,EAAqB,CAAC,EAAD,EAAK,gBAAL,EAAuB,EAAvB,CAArB,EAAiD,CAAC,UAAD,CAAjD,EAA+D,CAAC,EAAD,EAAK,UAAL,EAAiB,EAAjB,CAA/D,CAA5B;AAAkHkF,EAAAA,cAAc,EAAE,SAASC,sBAAT,CAAgCC,EAAhC,EAAoCC,GAApC,EAAyCC,QAAzC,EAAmD;AAAE,QAAIF,EAAE,GAAG,CAAT,EAAY;AACnO3G,MAAAA,MAAM,CAAC8G,cAAP,CAAsBD,QAAtB,EAAgClG,eAAhC,EAAiD,CAAjD;AACAX,MAAAA,MAAM,CAAC8G,cAAP,CAAsBD,QAAtB,EAAgCjG,sBAAhC,EAAwD,CAAxD;AACAZ,MAAAA,MAAM,CAAC8G,cAAP,CAAsBD,QAAtB,EAAgCnG,eAAhC,EAAiD,CAAjD;AACH;;AAAC,QAAIiG,EAAE,GAAG,CAAT,EAAY;AACV,UAAII,EAAJ;;AACA/G,MAAAA,MAAM,CAACgH,cAAP,CAAsBD,EAAE,GAAG/G,MAAM,CAACiH,WAAP,EAA3B,MAAqDL,GAAG,CAACM,MAAJ,GAAaH,EAAE,CAACI,KAArE;AACAnH,MAAAA,MAAM,CAACgH,cAAP,CAAsBD,EAAE,GAAG/G,MAAM,CAACiH,WAAP,EAA3B,MAAqDL,GAAG,CAACQ,YAAJ,GAAmBL,EAAE,CAACI,KAA3E;AACAnH,MAAAA,MAAM,CAACgH,cAAP,CAAsBD,EAAE,GAAG/G,MAAM,CAACiH,WAAP,EAA3B,MAAqDL,GAAG,CAACS,UAAJ,GAAiBN,EAAE,CAACI,KAAzE;AACH;AAAE,GATiC;AAS/B3F,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,CAAnB,EAAsB,UAAtB,EAAkC,qBAAlC,CAToB;AASsC8F,EAAAA,QAAQ,EAAE,EAThD;AASoDC,EAAAA,YAAY,EAAE,SAASC,oBAAT,CAA8Bb,EAA9B,EAAkCC,GAAlC,EAAuC;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACvJ3G,MAAAA,MAAM,CAACyH,UAAP,CAAkB,OAAlB,EAA2B,SAASC,gCAAT,CAA0CC,MAA1C,EAAkD;AAAE,eAAOf,GAAG,CAACgB,YAAJ,CAAiBD,MAAjB,CAAP;AAAkC,OAAjH,EAAmH,SAAnH,EAA8H,SAASE,kCAAT,CAA4CF,MAA5C,EAAoD;AAAE,eAAOf,GAAG,CAACkB,cAAJ,CAAmBH,MAAnB,CAAP;AAAoC,OAAxN,EAA0N,OAA1N,EAAmO,SAASI,gCAAT,GAA4C;AAAE,eAAOnB,GAAG,CAACnB,KAAJ,EAAP;AAAqB,OAAtS,EAAwS,MAAxS,EAAgT,SAASuC,+BAAT,GAA2C;AAAE,eAAOpB,GAAG,CAACqB,KAAJ,EAAP;AAAqB,OAAlX;AACH;;AAAC,QAAItB,EAAE,GAAG,CAAT,EAAY;AACV3G,MAAAA,MAAM,CAACkI,WAAP,CAAmB,UAAnB,EAA+BtB,GAAG,CAACtC,QAAJ,GAAe,IAAf,GAAsBsC,GAAG,CAAChE,QAAzD,EAAmE,UAAnE,EAA+EgE,GAAG,CAACtC,QAAJ,IAAgB,IAA/F,EAAqG,eAArG,EAAsHsC,GAAG,CAACtC,QAAJ,CAAaS,QAAb,EAAtH,EAA+I,eAA/I,EAAgK6B,GAAG,CAACuB,YAApK;AACAnI,MAAAA,MAAM,CAACoI,WAAP,CAAmB,mBAAnB,EAAwCxB,GAAG,CAACpG,QAA5C,EAAsD,sBAAtD,EAA8EoG,GAAG,CAACM,MAAlF,EAA0F,6BAA1F,EAAyHN,GAAG,CAACQ,YAAJ,IAAoBR,GAAG,CAACS,UAAjJ,EAA6J,mBAA7J,EAAkLT,GAAG,CAACtC,QAAtL,EAAgM,yBAAhM,EAA2NsC,GAAG,CAACxC,mBAA/N;AACH;AAAE,GAdiC;AAc/BiE,EAAAA,MAAM,EAAE;AAAEC,IAAAA,KAAK,EAAE,OAAT;AAAkB/D,IAAAA,aAAa,EAAE,eAAjC;AAAkD3B,IAAAA,QAAQ,EAAE,UAA5D;AAAwEpC,IAAAA,QAAQ,EAAE,UAAlF;AAA8FgE,IAAAA,KAAK,EAAE,OAArG;AAA8GM,IAAAA,UAAU,EAAE,YAA1H;AAAwIR,IAAAA,QAAQ,EAAE,UAAlJ;AAA8JqB,IAAAA,SAAS,EAAE;AAAzK,GAduB;AAciK4C,EAAAA,OAAO,EAAE;AAAEhF,IAAAA,eAAe,EAAE,iBAAnB;AAAsCC,IAAAA,SAAS,EAAE,WAAjD;AAA8DC,IAAAA,OAAO,EAAE;AAAvE,GAd1K;AAc8P+E,EAAAA,QAAQ,EAAE,CAAC,SAAD,CAdxQ;AAcqR/G,EAAAA,QAAQ,EAAE,CAACzB,MAAM,CAACyI,0BAAR;AAd/R,CAAzB,CAAf;;AAeApG,OAAO,CAACqG,cAAR,GAAyB;AAAA,SAAM,CAC3B;AAAEpH,IAAAA,IAAI,EAAE7D;AAAR,GAD2B,EAE3B;AAAE6D,IAAAA,IAAI,EAAE5D;AAAR,GAF2B,EAG3B;AAAE4D,IAAAA,IAAI,EAAErC;AAAR,GAH2B,EAI3B;AAAEqC,IAAAA,IAAI,EAAEsD,SAAR;AAAmB+D,IAAAA,UAAU,EAAE,CAAC;AAAErH,MAAAA,IAAI,EAAE3D;AAAR,KAAD,EAAqB;AAAE2D,MAAAA,IAAI,EAAE1D,MAAR;AAAgBmE,MAAAA,IAAI,EAAE,CAACnD,yBAAD;AAAtB,KAArB;AAA/B,GAJ2B,EAK3B;AAAE0C,IAAAA,IAAI,EAAEzD;AAAR,GAL2B,EAM3B;AAAEyD,IAAAA,IAAI,EAAEsD,SAAR;AAAmB+D,IAAAA,UAAU,EAAE,CAAC;AAAErH,MAAAA,IAAI,EAAE1D,MAAR;AAAgBmE,MAAAA,IAAI,EAAE,CAAC7C,QAAD;AAAtB,KAAD;AAA/B,GAN2B,EAO3B;AAAEoC,IAAAA,IAAI,EAAEsH,MAAR;AAAgBD,IAAAA,UAAU,EAAE,CAAC;AAAErH,MAAAA,IAAI,EAAE3D;AAAR,KAAD,EAAqB;AAAE2D,MAAAA,IAAI,EAAE1D,MAAR;AAAgBmE,MAAAA,IAAI,EAAE,CAAC5C,qBAAD;AAAtB,KAArB;AAA5B,GAP2B,EAQ3B;AAAEmC,IAAAA,IAAI,EAAEsH,MAAR;AAAgBD,IAAAA,UAAU,EAAE,CAAC;AAAErH,MAAAA,IAAI,EAAExD,SAAR;AAAmBiE,MAAAA,IAAI,EAAE,CAAC,UAAD;AAAzB,KAAD;AAA5B,GAR2B,CAAN;AAAA,CAAzB;;AAUAM,OAAO,CAACwG,cAAR,GAAyB;AACrB3B,EAAAA,MAAM,EAAE,CAAC;AAAE5F,IAAAA,IAAI,EAAEvD,YAAR;AAAsBgE,IAAAA,IAAI,EAAE,CAACpB,eAAD;AAA5B,GAAD,CADa;AAErByG,EAAAA,YAAY,EAAE,CAAC;AAAE9F,IAAAA,IAAI,EAAEvD,YAAR;AAAsBgE,IAAAA,IAAI,EAAE,CAACnB,sBAAD;AAA5B,GAAD,CAFO;AAGrByG,EAAAA,UAAU,EAAE,CAAC;AAAE/F,IAAAA,IAAI,EAAEvD,YAAR;AAAsBgE,IAAAA,IAAI,EAAE,CAACrB,eAAD;AAA5B,GAAD,CAHS;AAIrBF,EAAAA,QAAQ,EAAE,CAAC;AAAEc,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CAJW;AAKrBwG,EAAAA,KAAK,EAAE,CAAC;AAAElD,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CALc;AAMrB8G,EAAAA,UAAU,EAAE,CAAC;AAAExD,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CANS;AAOrBsG,EAAAA,QAAQ,EAAE,CAAC;AAAEhD,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CAPW;AAQrB2H,EAAAA,SAAS,EAAE,CAAC;AAAErE,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CARU;AASrBuF,EAAAA,eAAe,EAAE,CAAC;AAAEjC,IAAAA,IAAI,EAAErD;AAAR,GAAD,CATI;AAUrBuF,EAAAA,SAAS,EAAE,CAAC;AAAElC,IAAAA,IAAI,EAAErD;AAAR,GAAD,CAVU;AAWrBwF,EAAAA,OAAO,EAAE,CAAC;AAAEnC,IAAAA,IAAI,EAAErD;AAAR,GAAD;AAXY,CAAzB;;AAaA,CAAC,YAAY;AAAE,GAAC,OAAO4D,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7B,MAAM,CAAC8B,iBAAP,CAAyBO,OAAzB,EAAkC,CAAC;AAC7Ff,IAAAA,IAAI,EAAE/D,SADuF;AAE7FwE,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,0DADT;AAECqG,MAAAA,MAAM,EAAE,CAAC,OAAD,EAAU,eAAV,EAA2B,UAA3B,CAFT;AAGCG,MAAAA,QAAQ,EAAE,SAHX;AAICvG,MAAAA,IAAI,EAAE;AACF,iBAAS,8BADP;AAEF,2BAAmB,4BAFjB;AAGF,gBAAQ,QAHN;AAIF,qCAA6B,UAJ3B;AAKF,wCAAgC,QAL9B;AAMF,+CAAuC,4BANrC;AAOF,qCAA6B,UAP3B;AAQF,2CAAmC,qBARjC;AASF,2BAAmB,kBATjB;AAUF,gCAAwB,qBAVtB;AAWF,gCAAwB,cAXtB;AAYF,mBAAW,sBAZT;AAaF,qBAAa,wBAbX;AAcF,mBAAW,SAdT;AAeF,kBAAU;AAfR;AAJP,KAAD;AAFuF,GAAD,CAAlC,EAwB1D,YAAY;AAAE,WAAO,CAAC;AAAEX,MAAAA,IAAI,EAAEtB,MAAM,CAACvC;AAAf,KAAD,EAA8B;AAAE6D,MAAAA,IAAI,EAAEtB,MAAM,CAACtC;AAAf,KAA9B,EAAuD;AAAE4D,MAAAA,IAAI,EAAErB,MAAM,CAAChB;AAAf,KAAvD,EAAkF;AAAEqC,MAAAA,IAAI,EAAEsD,SAAR;AAAmB+D,MAAAA,UAAU,EAAE,CAAC;AAC/HrH,QAAAA,IAAI,EAAE3D;AADyH,OAAD,EAE/H;AACC2D,QAAAA,IAAI,EAAE1D,MADP;AAECmE,QAAAA,IAAI,EAAE,CAACnD,yBAAD;AAFP,OAF+H;AAA/B,KAAlF,EAKX;AAAE0C,MAAAA,IAAI,EAAEtB,MAAM,CAACnC;AAAf,KALW,EAKyB;AAAEyD,MAAAA,IAAI,EAAEsD,SAAR;AAAmB+D,MAAAA,UAAU,EAAE,CAAC;AACtErH,QAAAA,IAAI,EAAE1D,MADgE;AAEtEmE,QAAAA,IAAI,EAAE,CAAC7C,QAAD;AAFgE,OAAD;AAA/B,KALzB,EAQX;AAAEoC,MAAAA,IAAI,EAAEsH,MAAR;AAAgBD,MAAAA,UAAU,EAAE,CAAC;AAC/BrH,QAAAA,IAAI,EAAE3D;AADyB,OAAD,EAE/B;AACC2D,QAAAA,IAAI,EAAE1D,MADP;AAECmE,QAAAA,IAAI,EAAE,CAAC5C,qBAAD;AAFP,OAF+B;AAA5B,KARW,EAaX;AAAEmC,MAAAA,IAAI,EAAEsH,MAAR;AAAgBD,MAAAA,UAAU,EAAE,CAAC;AAC/BrH,QAAAA,IAAI,EAAExD,SADyB;AAE/BiE,QAAAA,IAAI,EAAE,CAAC,UAAD;AAFyB,OAAD;AAA5B,KAbW,CAAP;AAgBF,GAxC8C,EAwC5C;AAAEwB,IAAAA,eAAe,EAAE,CAAC;AAC9BjC,MAAAA,IAAI,EAAErD;AADwB,KAAD,CAAnB;AAEVuF,IAAAA,SAAS,EAAE,CAAC;AACZlC,MAAAA,IAAI,EAAErD;AADM,KAAD,CAFD;AAIVwF,IAAAA,OAAO,EAAE,CAAC;AACVnC,MAAAA,IAAI,EAAErD;AADI,KAAD,CAJC;AAMVuC,IAAAA,QAAQ,EAAE,CAAC;AACXc,MAAAA,IAAI,EAAEtD;AADK,KAAD,CANA;AAQVwG,IAAAA,KAAK,EAAE,CAAC;AACRlD,MAAAA,IAAI,EAAEtD;AADE,KAAD,CARG;AAUV8G,IAAAA,UAAU,EAAE,CAAC;AACbxD,MAAAA,IAAI,EAAEtD;AADO,KAAD,CAVF;AAYVsG,IAAAA,QAAQ,EAAE,CAAC;AACXhD,MAAAA,IAAI,EAAEtD;AADK,KAAD,CAZA;AAcV2H,IAAAA,SAAS,EAAE,CAAC;AACZrE,MAAAA,IAAI,EAAEtD;AADM,KAAD,CAdD;AAgBVkJ,IAAAA,MAAM,EAAE,CAAC;AACT5F,MAAAA,IAAI,EAAEvD,YADG;AAETgE,MAAAA,IAAI,EAAE,CAACpB,eAAD;AAFG,KAAD,CAhBE;AAmBVyG,IAAAA,YAAY,EAAE,CAAC;AACf9F,MAAAA,IAAI,EAAEvD,YADS;AAEfgE,MAAAA,IAAI,EAAE,CAACnB,sBAAD;AAFS,KAAD,CAnBJ;AAsBVyG,IAAAA,UAAU,EAAE,CAAC;AACb/F,MAAAA,IAAI,EAAEvD,YADO;AAEbgE,MAAAA,IAAI,EAAE,CAACrB,eAAD;AAFO,KAAD;AAtBF,GAxC4C,CAAnD;AAiEC,CAjEhB;AAkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMoI,a;AACF,yBAAYC,WAAZ,EAAyBC,UAAzB,EAAqC;AAAA;;AACjC,SAAKD,WAAL,GAAmBA,WAAnB;;AACA,QAAIC,UAAU,CAACjF,aAAX,CAAyBkF,QAAzB,KAAsC,QAA1C,EAAoD;AAChDD,MAAAA,UAAU,CAACjF,aAAX,CAAyBmF,YAAzB,CAAsC,MAAtC,EAA8C,QAA9C;AACH;AACJ;AACD;;;;;WACA,sBAAatD,KAAb,EAAoB;AAChB,UAAMuD,UAAU,GAAG,KAAKJ,WAAxB;;AACA,UAAII,UAAU,CAACxD,SAAX,IAAwB,CAACwD,UAAU,CAAC7E,QAAxC,EAAkD;AAC9C6E,QAAAA,UAAU,CAACnD,MAAX;AACH,OAJe,CAKhB;AACA;AACA;AACA;AACA;;;AACAJ,MAAAA,KAAK,CAACE,eAAN;AACH;;;;;;AAELgD,aAAa,CAAC7H,IAAd,GAAqB,SAASmI,qBAAT,CAA+BjI,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAI2H,aAAV,EAAyB9I,MAAM,CAACuG,iBAAP,CAAyBlE,OAAzB,CAAzB,EAA4DrC,MAAM,CAACuG,iBAAP,CAAyBvG,MAAM,CAACvC,UAAhC,CAA5D,CAAP;AAAkH,CAA3K;;AACAqL,aAAa,CAAC1H,IAAd,GAAqBpB,MAAM,CAACqB,iBAAP,CAAyB;AAAEC,EAAAA,IAAI,EAAEwH,aAAR;AAAuBvH,EAAAA,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,eAAL,EAAsB,EAAtB,CAAD,CAAlC;AAA+DC,EAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,iBAAJ,EAAuB,wBAAvB,CAA1E;AAA4H+F,EAAAA,YAAY,EAAE,SAAS8B,0BAAT,CAAoC1C,EAApC,EAAwCC,GAAxC,EAA6C;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAC3O3G,MAAAA,MAAM,CAACyH,UAAP,CAAkB,OAAlB,EAA2B,SAAS6B,sCAAT,CAAgD3B,MAAhD,EAAwD;AAAE,eAAOf,GAAG,CAACgB,YAAJ,CAAiBD,MAAjB,CAAP;AAAkC,OAAvH;AACH;AAAE,GAFuC;AAErClG,EAAAA,QAAQ,EAAE,CAACzB,MAAM,CAAC0B,kBAAP,CAA0B,CAAC;AAAEC,IAAAA,OAAO,EAAEjB,eAAX;AAA4BkB,IAAAA,WAAW,EAAEkH;AAAzC,GAAD,CAA1B,CAAD;AAF2B,CAAzB,CAArB;;AAGAA,aAAa,CAACJ,cAAd,GAA+B;AAAA,SAAM,CACjC;AAAEpH,IAAAA,IAAI,EAAEe;AAAR,GADiC,EAEjC;AAAEf,IAAAA,IAAI,EAAE7D;AAAR,GAFiC,CAAN;AAAA,CAA/B;;AAIA,CAAC,YAAY;AAAE,GAAC,OAAOoE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7B,MAAM,CAAC8B,iBAAP,CAAyBgH,aAAzB,EAAwC,CAAC;AACnGxH,IAAAA,IAAI,EAAE/D,SAD6F;AAEnGwE,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,iBADX;AAECC,MAAAA,IAAI,EAAE;AACF,iBAAS,wCADP;AAEF,mBAAW;AAFT,OAFP;AAMCC,MAAAA,SAAS,EAAE,CAAC;AAAEP,QAAAA,OAAO,EAAEjB,eAAX;AAA4BkB,QAAAA,WAAW,EAAEkH;AAAzC,OAAD;AANZ,KAAD;AAF6F,GAAD,CAAxC,EAU1D,YAAY;AAAE,WAAO,CAAC;AAAExH,MAAAA,IAAI,EAAEe;AAAR,KAAD,EAAoB;AAAEf,MAAAA,IAAI,EAAEtB,MAAM,CAACvC;AAAf,KAApB,CAAP;AAA0D,GAVd,EAUgB,IAVhB,CAAnD;AAU2E,CAV1F;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,IAAM8L,yBAAyB,GAAG,IAAIjM,cAAJ,CAAmB,2BAAnB,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;IACMkM,e,6BACF,yBAAYC,yBAAZ,EAAuCC,WAAvC,EAAoDC,gBAApD;AACA;AACAC,SAFA,EAEW;AAAA;;AACP,OAAKH,yBAAL,GAAiCA,yBAAjC;AACA,OAAKC,WAAL,GAAmBA,WAAnB;AACA,OAAKC,gBAAL,GAAwBA,gBAAxB;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACH,C;;AAEL,IAAMC,qBAAqB,GAAGhL,eAAe,CAAC2K,eAAD,CAA7C,C,CACA;;;AACA,IAAIM,YAAY,GAAG,CAAnB;AACA;;IACMC,iB,6BACF;AACA;AACAxJ,MAFA;AAGA;AACAiE,KAJA,EAIO;AAAA;;AACH,OAAKjE,MAAL,GAAcA,MAAd;AACA,OAAKiE,KAAL,GAAaA,KAAb;AACH,C;AAEL;AACA;AACA;;;IACMwF,W;;;;;AACF,uBAAYlJ,WAAZ,EAAyB2B,kBAAzB,EAA6CwH,IAA7C,EAAmDP,WAAnD,EAAgEC,gBAAhE,EAAkFF,yBAAlF;AACA;AACAG,EAAAA,SAFA,EAEW;AAAA;;AAAA;;AACP,gCAAMH,yBAAN,EAAiCC,WAAjC,EAA8CC,gBAA9C,EAAgEC,SAAhE;AACA,WAAK9I,WAAL,GAAmBA,WAAnB;AACA,WAAK2B,kBAAL,GAA0BA,kBAA1B;AACA,WAAKwH,IAAL,GAAYA,IAAZ;AACA,WAAKL,SAAL,GAAiBA,SAAjB;AACA;AACR;AACA;AACA;;AACQ,WAAKM,WAAL,GAAmB,eAAnB;AACA;AACR;AACA;AACA;AACA;;AACQ,WAAKC,uBAAL,GAA+B,IAA/B;AACA;;AACA,WAAKC,UAAL,GAAkB,IAAIhL,OAAJ,EAAlB;AACA;;AACA,WAAKiL,IAAL,2BAA6BP,YAAY,EAAzC;AACA;;AACA,WAAKQ,SAAL,GAAiB,CAAjB;AACA;AACR;AACA;AACA;;AACQ,WAAKC,aAAL,GAAqB,IAArB;AACA;;AACA,WAAKC,UAAL,GAAkB,YAAM,CAAG,CAA3B;AACA;;;AACA,WAAKC,SAAL,GAAiB,YAAM,CAAG,CAA1B;;AACA,WAAKC,SAAL,GAAiB,KAAjB;;AACA,WAAKC,YAAL,GAAoB,UAACC,EAAD,EAAKC,EAAL;AAAA,aAAYD,EAAE,KAAKC,EAAnB;AAAA,KAApB;;AACA,WAAKC,SAAL,GAAiB,KAAjB;AACA,WAAK3H,SAAL,GAAiB,KAAjB;AACA;;AACA,WAAK4H,eAAL,GAAuB,YAAvB;AACA,WAAK7H,WAAL,GAAmB,IAAnB;AACA;;AACA,WAAK8H,MAAL,GAAc,IAAIxN,YAAJ,EAAd;AACA;AACR;AACA;AACA;AACA;;AACQ,WAAKyN,WAAL,GAAmB,IAAIzN,YAAJ,EAAnB;;AACA,QAAI,OAAKoM,SAAT,EAAoB;AAChB,aAAKA,SAAL,CAAesB,aAAf;AACH;;AAjDM;AAkDV;AACD;;;;;SACA,eAAe;AACX,aAAO,KAAKC,QAAL,GAAgB,KAAKC,eAAL,CAAqB5K,QAArC,GAAgD,KAAK4K,eAAL,CAAqB5K,QAArB,CAA8B,CAA9B,CAAvD;AACH;AACD;;;;SACA,eAAW;AAAE,aAAO,KAAK6K,KAAL,GAAa,IAAb,GAAoB,SAA3B;AAAuC;AACpD;;;;SACA,eAAe;AAAE,aAAO,KAAKX,SAAZ;AAAwB,K;SACzC,aAAalG,KAAb,EAAoB;AAChB,WAAKkG,SAAL,GAAiB1L,qBAAqB,CAACwF,KAAD,CAAtC;;AACA,WAAK8G,eAAL;AACH;AACD;AACJ;AACA;AACA;AACA;;;;SACI,eAAkB;AAAE,aAAO,KAAKX,YAAZ;AAA2B,K;SAC/C,aAAgBY,EAAhB,EAAoB;AAChB,WAAKZ,YAAL,GAAoBY,EAApB;;AACA,UAAI,KAAKH,eAAT,EAA0B;AACtB;AACA,aAAKI,oBAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;SACI,eAAY;AAAE,aAAO,KAAK7G,MAAZ;AAAqB,K;SACnC,aAAUH,KAAV,EAAiB;AACb,WAAKiH,UAAL,CAAgBjH,KAAhB;AACA,WAAKG,MAAL,GAAcH,KAAd;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAS;AACL,aAAO,KAAKkH,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,EAAlC,GAAuC,KAAKtB,IAAnD;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAe;AAAE,aAAO,KAAKS,SAAZ;AAAwB,K;SACzC,aAAatG,KAAb,EAAoB;AAChB,WAAKsG,SAAL,GAAiB9L,qBAAqB,CAACwF,KAAD,CAAtC;AACA,WAAKoH,YAAL,CAAkBlG,IAAlB;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAkB;AACd,aAAO,KAAKgG,UAAL,GAAkB,KAAKA,UAAL,CAAgBG,WAAlC,GAAgD,KAAKC,YAA5D;AACH,K;SACD,aAAgBtH,KAAhB,EAAuB;AACnB,WAAKsH,YAAL,GAAoBtH,KAApB;AACA,WAAKoH,YAAL,CAAkBlG,IAAlB;AACH;AACD;;;;SACA,eAAc;AACV,aAAQ,KAAKgG,UAAL,IAAmB,KAAKA,UAAL,CAAgBK,OAApC,IAAgD,KAAKC,eAAL,EAAvD;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAY;AACR,aAAO,CAAC,CAAC,KAAKN,UAAN,IAAoB,KAAKA,UAAL,CAAgBL,KAArC,MAAgD,CAAC,KAAKY,KAAN,IAAe,KAAKA,KAAL,CAAWC,MAAX,KAAsB,CAArF,CAAP;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAuB;AAAE,aAAO,CAAC,KAAKb,KAAN,IAAe,KAAKU,OAA3B;AAAqC;AAC9D;AACJ;AACA;AACA;;;;SACI,eAAe;AAAE,aAAO,KAAKnC,SAAL,GAAiB,CAAC,CAAC,KAAKA,SAAL,CAAetF,QAAlC,GAA6C,KAAKnB,SAAzD;AAAqE,K;SACtF,aAAaqB,KAAb,EAAoB;AAChB,WAAKrB,SAAL,GAAiBnE,qBAAqB,CAACwF,KAAD,CAAtC;;AACA,WAAK8G,eAAL;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAiB;AAAE,aAAO,KAAKpI,WAAZ;AAA0B,K;SAC7C,aAAesB,KAAf,EAAsB;AAAA;;AAClB,WAAKtB,WAAL,GAAmBlE,qBAAqB,CAACwF,KAAD,CAAxC;;AACA,UAAI,KAAKyH,KAAT,EAAgB;AACZ,aAAKA,KAAL,CAAWE,OAAX,CAAmB,UAAA7G,IAAI;AAAA,iBAAIA,IAAI,CAACxC,kBAAL,GAA0B,MAAI,CAACI,WAAnC;AAAA,SAAvB;AACH;AACJ;;;SACD,aAAasB,KAAb,EAAoB;AAChB,WAAK+F,aAAL,GAAqB/F,KAArB;AACA,WAAK8F,SAAL,GAAiB9F,KAAjB;AACH;AACD;;;;SACA,eAA2B;AACvB,aAAOnF,KAAK,MAAL,4BAAS,KAAK4M,KAAL,CAAWG,GAAX,CAAe,UAAA9G,IAAI;AAAA,eAAIA,IAAI,CAAC/B,eAAT;AAAA,OAAnB,CAAT,EAAP;AACH;AACD;;;;SACA,eAAuB;AACnB,aAAOlE,KAAK,MAAL,4BAAS,KAAK4M,KAAL,CAAWG,GAAX,CAAe,UAAA9G,IAAI;AAAA,eAAIA,IAAI,CAACjC,QAAT;AAAA,OAAnB,CAAT,EAAP;AACH;AACD;;;;SACA,eAAsB;AAClB,aAAOhE,KAAK,MAAL,4BAAS,KAAK4M,KAAL,CAAWG,GAAX,CAAe,UAAA9G,IAAI;AAAA,eAAIA,IAAI,CAAChC,OAAT;AAAA,OAAnB,CAAT,EAAP;AACH;AACD;;;;SACA,eAAwB;AACpB,aAAOjE,KAAK,MAAL,4BAAS,KAAK4M,KAAL,CAAWG,GAAX,CAAe,UAAA9G,IAAI;AAAA,eAAIA,IAAI,CAAC9B,SAAT;AAAA,OAAnB,CAAT,EAAP;AACH;;;WACD,8BAAqB;AAAA;;AACjB,WAAK6I,WAAL,GAAmB,IAAI5M,eAAJ,CAAoB,KAAKwM,KAAzB,EACdK,QADc,GAEdC,uBAFc,GAGdC,cAHc,GAIdC,yBAJc,CAIY,KAAKxC,IAAL,GAAY,KAAKA,IAAL,CAAUzF,KAAtB,GAA8B,KAJ1C,CAAnB;;AAKA,UAAI,KAAKyF,IAAT,EAAe;AACX,aAAKA,IAAL,CAAUe,MAAV,CACK7E,IADL,CACU5G,SAAS,CAAC,KAAK6K,UAAN,CADnB,EAEKhE,SAFL,CAEe,UAAAsG,GAAG;AAAA,iBAAI,MAAI,CAACL,WAAL,CAAiBI,yBAAjB,CAA2CC,GAA3C,CAAJ;AAAA,SAFlB;AAGH;;AACD,WAAKL,WAAL,CAAiBM,MAAjB,CAAwBxG,IAAxB,CAA6B5G,SAAS,CAAC,KAAK6K,UAAN,CAAtC,EAAyDhE,SAAzD,CAAmE,YAAM;AACrE,QAAA,MAAI,CAACwG,iBAAL;AACH,OAFD,EAXiB,CAcjB;;;AACA,WAAKX,KAAL,CAAWY,OAAX,CAAmB1G,IAAnB,CAAwB3G,SAAS,CAAC,IAAD,CAAjC,EAAyCD,SAAS,CAAC,KAAK6K,UAAN,CAAlD,EAAqEhE,SAArE,CAA+E,YAAM;AACjF,YAAI,MAAI,CAAC9B,QAAT,EAAmB;AACf;AACA;AACAwI,UAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAM;AACzB,YAAA,MAAI,CAAC1B,eAAL;AACH,WAFD;AAGH;;AACD,QAAA,MAAI,CAAC2B,WAAL,GARiF,CASjF;;;AACA,QAAA,MAAI,CAACzB,oBAAL,GAViF,CAWjF;;;AACA,QAAA,MAAI,CAAC0B,eAAL,GAZiF,CAajF;;;AACA,QAAA,MAAI,CAACC,6BAAL;;AACA,QAAA,MAAI,CAACvB,YAAL,CAAkBlG,IAAlB;AACH,OAhBD;AAiBH;;;WACD,oBAAW;AACP,WAAK0F,eAAL,GAAuB,IAAIzL,cAAJ,CAAmB,KAAKwL,QAAxB,EAAkCvG,SAAlC,EAA6C,KAA7C,CAAvB;AACA,WAAKgH,YAAL,CAAkBlG,IAAlB;AACH;;;WACD,qBAAY;AACR,UAAI,KAAKkE,SAAT,EAAoB;AAChB;AACA;AACA;AACA,aAAKwD,gBAAL;;AACA,YAAI,KAAKxD,SAAL,CAAetF,QAAf,KAA4B,KAAKnB,SAArC,EAAgD;AAC5C,eAAKmB,QAAL,GAAgB,CAAC,CAAC,KAAKsF,SAAL,CAAetF,QAAjC;AACH;AACJ;AACJ;;;WACD,uBAAc;AACV,WAAK8F,UAAL,CAAgB1E,IAAhB;;AACA,WAAK0E,UAAL,CAAgBiD,QAAhB;;AACA,WAAKzB,YAAL,CAAkByB,QAAlB;;AACA,WAAKC,kBAAL;AACH;AACD;;;;WACA,uBAAcC,YAAd,EAA4B;AACxB,WAAK7B,UAAL,GAAkB6B,YAAlB,CADwB,CAExB;AACA;;AACA,WAAKzM,WAAL,CAAiBiD,aAAjB,CAA+BmF,YAA/B,CAA4C,qBAA5C,EAAmEqE,YAAY,CAAC5B,EAAhF;AACH;AACD;AACJ;AACA;AACA;;;;WACI,2BAAkB6B,GAAlB,EAAuB;AAAE,WAAKC,gBAAL,GAAwBD,GAAG,CAACE,IAAJ,CAAS,GAAT,CAAxB;AAAwC,K,CACjE;;;;WACA,oBAAWlJ,KAAX,EAAkB;AACd,UAAI,KAAKyH,KAAT,EAAgB;AACZ,aAAK0B,oBAAL,CAA0BnJ,KAA1B,EAAiC,KAAjC;AACH;AACJ,K,CACD;;;;WACA,0BAAiB+G,EAAjB,EAAqB;AACjB,WAAKd,SAAL,GAAiBc,EAAjB;AACH,K,CACD;;;;WACA,2BAAkBA,EAAlB,EAAsB;AAClB,WAAKf,UAAL,GAAkBe,EAAlB;AACH,K,CACD;;;;WACA,0BAAiBqC,UAAjB,EAA6B;AACzB,WAAKtJ,QAAL,GAAgBsJ,UAAhB;AACA,WAAKhC,YAAL,CAAkBlG,IAAlB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiBE,KAAjB,EAAwB;AACpB,UAAI,CAAC,KAAKiI,mBAAL,CAAyBjI,KAAzB,CAAL,EAAsC;AAClC,aAAKH,KAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,eAAMqI,OAAN,EAAe;AACX,UAAI,KAAKxJ,QAAT,EAAmB;AACf;AACH,OAHU,CAIX;AACA;;;AACA,UAAI,KAAKoH,UAAL,IAAmB,KAAKA,UAAL,CAAgBK,OAAvC,EAAgD,CAC5C;AACH,OAFD,MAGK,IAAI,KAAKE,KAAL,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AAC5B,aAAKG,WAAL,CAAiB0B,kBAAjB;;AACA,aAAKnC,YAAL,CAAkBlG,IAAlB;AACH,OAHI,MAIA;AACD,aAAKsI,WAAL,CAAiBF,OAAjB;;AACA,aAAKlC,YAAL,CAAkBlG,IAAlB;AACH;AACJ;AACD;;;;WACA,qBAAYoI,OAAZ,EAAqB;AACjB,UAAI,KAAKpC,UAAT,EAAqB;AACjB,aAAKA,UAAL,CAAgBjG,KAAhB,CAAsBqI,OAAtB;AACH;AACJ;AACD;AACJ;AACA;;;;WACI,kBAASlI,KAAT,EAAgB;AACZ,UAAMqI,MAAM,GAAGrI,KAAK,CAACqI,MAArB,CADY,CAEZ;;AACA,UAAIrI,KAAK,CAACG,OAAN,KAAkB9I,SAAlB,IAA+B,KAAKiR,aAAL,CAAmBD,MAAnB,CAAnC,EAA+D;AAC3D,aAAK5B,WAAL,CAAiB8B,iBAAjB;;AACAvI,QAAAA,KAAK,CAACC,cAAN;AACH,OAHD,MAIK,IAAIoI,MAAM,IAAIA,MAAM,CAACpK,SAAP,CAAiBuK,QAAjB,CAA0B,UAA1B,CAAd,EAAqD;AACtD,aAAK/B,WAAL,CAAiBgC,SAAjB,CAA2BzI,KAA3B;;AACA,aAAKgG,YAAL,CAAkBlG,IAAlB;AACH;AACJ;AACD;AACJ;AACA;;;;WACI,2BAAkB;AACd;AACA,WAAK4E,SAAL,GAAiB,KAAKC,aAAL,KAAuB,KAAK0B,KAAL,CAAWC,MAAX,KAAsB,CAAtB,GAA0B,CAAC,CAA3B,GAA+B,CAAtD,CAAjB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,yCAAgC;AAC5B;AACA,UAAI,KAAK/B,uBAAL,IAAgC,IAApC,EAA0C;AACtC,YAAI,KAAK8B,KAAL,CAAWC,MAAf,EAAuB;AACnB,cAAMoC,YAAY,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKrE,uBAAd,EAAuC,KAAK8B,KAAL,CAAWC,MAAX,GAAoB,CAA3D,CAArB;;AACA,eAAKG,WAAL,CAAiBoC,aAAjB,CAA+BH,YAA/B;AACH,SAHD,MAIK;AACD,eAAK7I,KAAL;AACH;AACJ;;AACD,WAAK0E,uBAAL,GAA+B,IAA/B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,uBAAcuE,KAAd,EAAqB;AACjB,aAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,KAAKzC,KAAL,CAAWC,MAAxC;AACH;;;WACD,uBAAcjH,OAAd,EAAuB;AACnB,UAAIA,OAAO,IAAIA,OAAO,CAACgE,QAAR,CAAiB7D,WAAjB,OAAmC,OAAlD,EAA2D;AACvD,YAAIuJ,KAAK,GAAG1J,OAAZ;AACA,eAAO,CAAC0J,KAAK,CAACnK,KAAd;AACH;;AACD,aAAO,KAAP;AACH;;;WACD,8BAAqBA,KAArB,EAAgD;AAAA;;AAAA,UAApB/D,WAAoB,uEAAN,IAAM;;AAC5C,WAAKmO,eAAL;;AACA,WAAK3C,KAAL,CAAWE,OAAX,CAAmB,UAAA7G,IAAI;AAAA,eAAIA,IAAI,CAACuJ,QAAL,EAAJ;AAAA,OAAvB;;AACA,UAAIC,KAAK,CAACC,OAAN,CAAcvK,KAAd,CAAJ,EAA0B;AACtBA,QAAAA,KAAK,CAAC2H,OAAN,CAAc,UAAA6C,YAAY;AAAA,iBAAI,MAAI,CAACC,YAAL,CAAkBD,YAAlB,EAAgCvO,WAAhC,CAAJ;AAAA,SAA1B;;AACA,aAAKyO,WAAL;AACH,OAHD,MAIK;AACD,YAAMC,iBAAiB,GAAG,KAAKF,YAAL,CAAkBzK,KAAlB,EAAyB/D,WAAzB,CAA1B,CADC,CAED;AACA;;;AACA,YAAI0O,iBAAJ,EAAuB;AACnB,cAAI1O,WAAJ,EAAiB;AACb,iBAAK4L,WAAL,CAAiBoC,aAAjB,CAA+BU,iBAA/B;AACH;AACJ;AACJ;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,sBAAa3K,KAAb,EAAwC;AAAA;;AAAA,UAApB/D,WAAoB,uEAAN,IAAM;AACpC,UAAM0O,iBAAiB,GAAG,KAAKlD,KAAL,CAAWmD,IAAX,CAAgB,UAAA9J,IAAI,EAAI;AAC9C,eAAOA,IAAI,CAACd,KAAL,IAAc,IAAd,IAAsB,MAAI,CAACmG,YAAL,CAAkBrF,IAAI,CAACd,KAAvB,EAA8BA,KAA9B,CAA7B;AACH,OAFyB,CAA1B;;AAGA,UAAI2K,iBAAJ,EAAuB;AACnB1O,QAAAA,WAAW,GAAG0O,iBAAiB,CAACE,oBAAlB,EAAH,GAA8CF,iBAAiB,CAACG,MAAlB,EAAzD;;AACA,aAAKlE,eAAL,CAAqBkE,MAArB,CAA4BH,iBAA5B;AACH;;AACD,aAAOA,iBAAP;AACH;;;WACD,gCAAuB;AAAA;;AACnB;AACA;AACArC,MAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAM;AACzB,YAAI,MAAI,CAACpD,SAAL,IAAkB,MAAI,CAACjF,MAA3B,EAAmC;AAC/B,UAAA,MAAI,CAACgJ,oBAAL,CAA0B,MAAI,CAAC/D,SAAL,GAAiB,MAAI,CAACA,SAAL,CAAepF,KAAhC,GAAwC,MAAI,CAACG,MAAvE,EAA+E,KAA/E;;AACA,UAAA,MAAI,CAACiH,YAAL,CAAkBlG,IAAlB;AACH;AACJ,OALD;AAMH;AACD;AACJ;AACA;AACA;;;;WACI,yBAAgB6J,IAAhB,EAAsB;AAClB,WAAKnE,eAAL,CAAqBoE,KAArB;;AACA,WAAKvD,KAAL,CAAWE,OAAX,CAAmB,UAAA7G,IAAI,EAAI;AACvB,YAAIA,IAAI,KAAKiK,IAAb,EAAmB;AACfjK,UAAAA,IAAI,CAACuJ,QAAL;AACH;AACJ,OAJD;AAKA,WAAKjD,YAAL,CAAkBlG,IAAlB;AACH;AACD;AACJ;AACA;AACA;;;;WACI,uBAAc;AAAA;;AACV,UAAI,KAAKgF,SAAT,EAAoB;AAChB,aAAKU,eAAL,CAAqBoE,KAArB;;AACA,aAAKvD,KAAL,CAAWE,OAAX,CAAmB,UAAA7G,IAAI,EAAI;AACvB,cAAIA,IAAI,CAAC9E,QAAT,EAAmB;AACf,YAAA,MAAI,CAAC4K,eAAL,CAAqBkE,MAArB,CAA4BhK,IAA5B;AACH;AACJ,SAJD;AAKA,aAAKsG,YAAL,CAAkBlG,IAAlB;AACH;AACJ;AACD;;;;WACA,2BAAkB+J,aAAlB,EAAiC;AAC7B,UAAIC,WAAW,GAAG,IAAlB;;AACA,UAAIZ,KAAK,CAACC,OAAN,CAAc,KAAKvO,QAAnB,CAAJ,EAAkC;AAC9BkP,QAAAA,WAAW,GAAG,KAAKlP,QAAL,CAAc4L,GAAd,CAAkB,UAAA9G,IAAI;AAAA,iBAAIA,IAAI,CAACd,KAAT;AAAA,SAAtB,CAAd;AACH,OAFD,MAGK;AACDkL,QAAAA,WAAW,GAAG,KAAKlP,QAAL,GAAgB,KAAKA,QAAL,CAAcgE,KAA9B,GAAsCiL,aAApD;AACH;;AACD,WAAK9K,MAAL,GAAc+K,WAAd;AACA,WAAK1E,MAAL,CAAY3F,IAAZ,CAAiB,IAAI0E,iBAAJ,CAAsB,IAAtB,EAA4B2F,WAA5B,CAAjB;AACA,WAAKzE,WAAL,CAAiB5F,IAAjB,CAAsBqK,WAAtB;;AACA,WAAKjF,SAAL,CAAeiF,WAAf;;AACA,WAAKjN,kBAAL,CAAwB+C,YAAxB;AACH;AACD;;;;WACA,iBAAQ;AAAA;;AACJ,UAAI,CAAC,KAAKwG,eAAL,EAAL,EAA6B;AACzB,aAAKK,WAAL,CAAiBoC,aAAjB,CAA+B,CAAC,CAAhC;AACH;;AACD,UAAI,CAAC,KAAKnK,QAAV,EAAoB;AAChB,YAAI,KAAKoH,UAAT,EAAqB;AACjB;AACA;AACA;AACA;AACAiE,UAAAA,UAAU,CAAC,YAAM;AACb,gBAAI,CAAC,OAAI,CAAC5D,OAAV,EAAmB;AACf,cAAA,OAAI,CAAC6D,cAAL;AACH;AACJ,WAJS,CAAV;AAKH,SAVD,MAWK;AACD;AACA,eAAKA,cAAL;AACH;AACJ;AACJ;AACD;;;;WACA,0BAAiB;AACb,WAAKpF,UAAL;;AACA,WAAK/H,kBAAL,CAAwB+C,YAAxB;;AACA,WAAKoG,YAAL,CAAkBlG,IAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,6BAAoB;AAAA;;AAChB,UAAI,KAAK4E,SAAL,KAAmB,CAAC,CAAxB,EAA2B;AACvB,aAAKA,SAAL,GAAiB,CAAC,CAAlB;AACAqF,QAAAA,UAAU,CAAC,YAAM;AACb,UAAA,OAAI,CAACrF,SAAL,GAAiB,OAAI,CAACC,aAAL,IAAsB,CAAvC;;AACA,UAAA,OAAI,CAAC9H,kBAAL,CAAwB+C,YAAxB;AACH,SAHS,CAAV;AAIH;AACJ;;;WACD,uBAAc;AACV,WAAK8H,kBAAL;;AACA,WAAKuC,mBAAL;;AACA,WAAKC,uBAAL;;AACA,WAAKC,qBAAL;AACH;;;WACD,8BAAqB;AACjB,UAAI,KAAKC,sBAAT,EAAiC;AAC7B,aAAKA,sBAAL,CAA4BC,WAA5B;;AACA,aAAKD,sBAAL,GAA8B,IAA9B;AACH;;AACD,UAAI,KAAKE,qBAAT,EAAgC;AAC5B,aAAKA,qBAAL,CAA2BD,WAA3B;;AACA,aAAKC,qBAAL,GAA6B,IAA7B;AACH;;AACD,UAAI,KAAKC,0BAAT,EAAqC;AACjC,aAAKA,0BAAL,CAAgCF,WAAhC;;AACA,aAAKE,0BAAL,GAAkC,IAAlC;AACH;;AACD,UAAI,KAAKC,uBAAT,EAAkC;AAC9B,aAAKA,uBAAL,CAA6BH,WAA7B;;AACA,aAAKG,uBAAL,GAA+B,IAA/B;AACH;AACJ;AACD;;;;WACA,mCAA0B;AAAA;;AACtB,WAAKD,0BAAL,GAAkC,KAAKE,oBAAL,CAA0BjK,SAA1B,CAAoC,UAAAR,KAAK,EAAI;AAC3EA,QAAAA,KAAK,CAACrF,MAAN,CAAaC,QAAb,GACM,OAAI,CAAC4K,eAAL,CAAqBkE,MAArB,CAA4B1J,KAAK,CAACrF,MAAlC,CADN,GAEM,OAAI,CAAC6K,eAAL,CAAqByD,QAArB,CAA8BjJ,KAAK,CAACrF,MAApC,CAFN,CAD2E,CAI3E;;AACA,YAAI,CAAC,OAAI,CAAC4K,QAAV,EAAoB;AAChB,UAAA,OAAI,CAACc,KAAL,CAAWE,OAAX,CAAmB,UAAA7G,IAAI,EAAI;AACvB,gBAAI,CAAC,OAAI,CAAC8F,eAAL,CAAqBkF,UAArB,CAAgChL,IAAhC,CAAD,IAA0CA,IAAI,CAAC9E,QAAnD,EAA6D;AACzD8E,cAAAA,IAAI,CAACuJ,QAAL;AACH;AACJ,WAJD;AAKH;;AACD,YAAIjJ,KAAK,CAACnF,WAAV,EAAuB;AACnB,UAAA,OAAI,CAAC8P,iBAAL;AACH;AACJ,OAfiC,CAAlC;AAgBH;AACD;;;;WACA,+BAAsB;AAAA;;AAClB,WAAKP,sBAAL,GAA8B,KAAKQ,gBAAL,CAAsBpK,SAAtB,CAAgC,UAAAR,KAAK,EAAI;AACnE,YAAI6K,SAAS,GAAG,OAAI,CAACxE,KAAL,CAAWyE,OAAX,GAAqBC,OAArB,CAA6B/K,KAAK,CAACN,IAAnC,CAAhB;;AACA,YAAI,OAAI,CAACsL,aAAL,CAAmBH,SAAnB,CAAJ,EAAmC;AAC/B,UAAA,OAAI,CAACpE,WAAL,CAAiBwE,gBAAjB,CAAkCJ,SAAlC;AACH;;AACD,QAAA,OAAI,CAAC7E,YAAL,CAAkBlG,IAAlB;AACH,OAN6B,CAA9B;AAOA,WAAKwK,qBAAL,GAA6B,KAAKY,eAAL,CAAqB1K,SAArB,CAA+B,YAAM;AAC9D,QAAA,OAAI,CAAC6B,KAAL;;AACA,QAAA,OAAI,CAAC2D,YAAL,CAAkBlG,IAAlB;AACH,OAH4B,CAA7B;AAIH;;;WACD,iCAAwB;AAAA;;AACpB,WAAK0K,uBAAL,GAA+B,KAAKW,iBAAL,CAAuB3K,SAAvB,CAAiC,UAAAR,KAAK,EAAI;AACrE,YAAMN,IAAI,GAAGM,KAAK,CAACN,IAAnB;;AACA,YAAMmL,SAAS,GAAG,OAAI,CAACxE,KAAL,CAAWyE,OAAX,GAAqBC,OAArB,CAA6B/K,KAAK,CAACN,IAAnC,CAAlB,CAFqE,CAGrE;AACA;AACA;;;AACA,YAAI,OAAI,CAACsL,aAAL,CAAmBH,SAAnB,KAAiCnL,IAAI,CAACzC,SAA1C,EAAqD;AACjD,UAAA,OAAI,CAACsH,uBAAL,GAA+BsG,SAA/B;AACH;AACJ,OAT8B,CAA/B;AAUH;AACD;;;;WACA,6BAAoB7K,KAApB,EAA2B;AACvB,UAAIoL,cAAc,GAAGpL,KAAK,CAACqI,MAA3B;;AACA,aAAO+C,cAAc,IAAIA,cAAc,KAAK,KAAKlQ,WAAL,CAAiBiD,aAA7D,EAA4E;AACxE,YAAIiN,cAAc,CAACnN,SAAf,CAAyBuK,QAAzB,CAAkC,UAAlC,CAAJ,EAAmD;AAC/C,iBAAO,IAAP;AACH;;AACD4C,QAAAA,cAAc,GAAGA,cAAc,CAACC,aAAhC;AACH;;AACD,aAAO,KAAP;AACH;AACD;;;;WACA,2BAAkB;AACd,aAAO,KAAKhF,KAAL,IAAc,KAAKA,KAAL,CAAWiF,IAAX,CAAgB,UAAA5L,IAAI;AAAA,eAAIA,IAAI,CAACzC,SAAT;AAAA,OAApB,CAArB;AACH;AACD;;;;WACA,2BAAkB;AAAA;;AACd,UAAI,KAAKoJ,KAAT,EAAgB;AACZ,aAAKA,KAAL,CAAWE,OAAX,CAAmB,UAAA7G,IAAI,EAAI;AACvBA,UAAAA,IAAI,CAACtC,iBAAL,GAAyB,OAAI,CAACG,SAA9B;AACAmC,UAAAA,IAAI,CAACvC,iBAAL,GAAyB,OAAI,CAACoI,QAA9B;AACH,SAHD;AAIH;AACJ;;;;EAxjBqBtB,qB;;AA0jB1BG,WAAW,CAAC/I,IAAZ,GAAmB,SAASkQ,mBAAT,CAA6BhQ,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI6I,WAAV,EAAuBhK,MAAM,CAACuG,iBAAP,CAAyBvG,MAAM,CAACvC,UAAhC,CAAvB,EAAoEuC,MAAM,CAACuG,iBAAP,CAAyBvG,MAAM,CAACnC,iBAAhC,CAApE,EAAwHmC,MAAM,CAACuG,iBAAP,CAAyBrG,MAAM,CAACR,cAAhC,EAAgD,CAAhD,CAAxH,EAA4KM,MAAM,CAACuG,iBAAP,CAAyBpG,MAAM,CAACP,MAAhC,EAAwC,CAAxC,CAA5K,EAAwNI,MAAM,CAACuG,iBAAP,CAAyBpG,MAAM,CAACN,kBAAhC,EAAoD,CAApD,CAAxN,EAAgRG,MAAM,CAACuG,iBAAP,CAAyBnG,MAAM,CAACtB,iBAAhC,CAAhR,EAAoUkB,MAAM,CAACuG,iBAAP,CAAyBpG,MAAM,CAACL,SAAhC,EAA2C,EAA3C,CAApU,CAAP;AAA6X,CAAlb;;AACAkK,WAAW,CAACoH,IAAZ,GAAmBpR,MAAM,CAACqR,iBAAP,CAAyB;AAAE/P,EAAAA,IAAI,EAAE0I,WAAR;AAAqBzI,EAAAA,SAAS,EAAE,CAAC,CAAC,eAAD,CAAD,CAAhC;AAAqDkF,EAAAA,cAAc,EAAE,SAAS6K,0BAAT,CAAoC3K,EAApC,EAAwCC,GAAxC,EAA6CC,QAA7C,EAAuD;AAAE,QAAIF,EAAE,GAAG,CAAT,EAAY;AAC9K3G,MAAAA,MAAM,CAAC8G,cAAP,CAAsBD,QAAtB,EAAgCxE,OAAhC,EAAyC,CAAzC;AACH;;AAAC,QAAIsE,EAAE,GAAG,CAAT,EAAY;AACV,UAAII,EAAJ;;AACA/G,MAAAA,MAAM,CAACgH,cAAP,CAAsBD,EAAE,GAAG/G,MAAM,CAACiH,WAAP,EAA3B,MAAqDL,GAAG,CAACqF,KAAJ,GAAYlF,EAAjE;AACH;AAAE,GALqC;AAKnCvF,EAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,eAAJ,CALwB;AAKF8F,EAAAA,QAAQ,EAAE,EALR;AAKYC,EAAAA,YAAY,EAAE,SAASgK,wBAAT,CAAkC5K,EAAlC,EAAsCC,GAAtC,EAA2C;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACvH3G,MAAAA,MAAM,CAACyH,UAAP,CAAkB,OAAlB,EAA2B,SAAS+J,oCAAT,GAAgD;AAAE,eAAO5K,GAAG,CAACnB,KAAJ,EAAP;AAAqB,OAAlG,EAAoG,MAApG,EAA4G,SAASgM,mCAAT,GAA+C;AAAE,eAAO7K,GAAG,CAACqB,KAAJ,EAAP;AAAqB,OAAlL,EAAoL,SAApL,EAA+L,SAASyJ,sCAAT,CAAgD/J,MAAhD,EAAwD;AAAE,eAAOf,GAAG,CAAC+K,QAAJ,CAAahK,MAAb,CAAP;AAA8B,OAAvR;AACH;;AAAC,QAAIhB,EAAE,GAAG,CAAT,EAAY;AACV3G,MAAAA,MAAM,CAAC4R,cAAP,CAAsB,IAAtB,EAA4BhL,GAAG,CAACyD,IAAhC;AACArK,MAAAA,MAAM,CAACkI,WAAP,CAAmB,UAAnB,EAA+BtB,GAAG,CAACtC,QAAJ,GAAe,IAAf,GAAsBsC,GAAG,CAAC0D,SAAzD,EAAoE,kBAApE,EAAwF1D,GAAG,CAAC6G,gBAAJ,IAAwB,IAAhH,EAAsH,eAAtH,EAAuI7G,GAAG,CAACiL,IAAJ,GAAWjL,GAAG,CAACkL,QAAf,GAA0B,IAAjK,EAAuK,eAAvK,EAAwLlL,GAAG,CAACtC,QAAJ,CAAaS,QAAb,EAAxL,EAAiN,cAAjN,EAAiO6B,GAAG,CAACmL,UAArO,EAAiP,sBAAjP,EAAyQnL,GAAG,CAACuE,QAA7Q,EAAuR,MAAvR,EAA+RvE,GAAG,CAACiL,IAAnS,EAAyS,kBAAzS,EAA6TjL,GAAG,CAACmE,eAAjU;AACA/K,MAAAA,MAAM,CAACoI,WAAP,CAAmB,wBAAnB,EAA6CxB,GAAG,CAACtC,QAAjD,EAA2D,uBAA3D,EAAoFsC,GAAG,CAACmL,UAAxF,EAAoG,wBAApG,EAA8HnL,GAAG,CAACkL,QAAlI;AACH;AAAE,GAXqC;AAWnCzJ,EAAAA,MAAM,EAAE;AAAE0C,IAAAA,eAAe,EAAE,CAAC,kBAAD,EAAqB,iBAArB,CAAnB;AAA4DI,IAAAA,QAAQ,EAAE,UAAtE;AAAkF6G,IAAAA,WAAW,EAAE,aAA/F;AAA8GxN,IAAAA,KAAK,EAAE,OAArH;AAA8HsN,IAAAA,QAAQ,EAAE,UAAxI;AAAoJjG,IAAAA,WAAW,EAAE,aAAjK;AAAgLvH,IAAAA,QAAQ,EAAE,UAA1L;AAAsMQ,IAAAA,UAAU,EAAE,YAAlN;AAAgOlC,IAAAA,QAAQ,EAAE,UAA1O;AAAsPqP,IAAAA,iBAAiB,EAAE;AAAzQ,GAX2B;AAWqQ1J,EAAAA,OAAO,EAAE;AAAEyC,IAAAA,MAAM,EAAE,QAAV;AAAoBC,IAAAA,WAAW,EAAE;AAAjC,GAX9Q;AAWgUzC,EAAAA,QAAQ,EAAE,CAAC,aAAD,CAX1U;AAW2V/G,EAAAA,QAAQ,EAAE,CAACzB,MAAM,CAAC0B,kBAAP,CAA0B,CAAC;AAAEC,IAAAA,OAAO,EAAE5B,mBAAX;AAAgC6B,IAAAA,WAAW,EAAEoI;AAA7C,GAAD,CAA1B,CAAD,EAA0FhK,MAAM,CAACyI,0BAAjG,CAXrW;AAWmeyJ,EAAAA,kBAAkB,EAAE7R,GAXvf;AAW4f8R,EAAAA,KAAK,EAAE,CAXngB;AAWsgBC,EAAAA,IAAI,EAAE,CAX5gB;AAW+gBC,EAAAA,MAAM,EAAE,CAAC,CAAC,CAAD,EAAI,uBAAJ,CAAD,CAXvhB;AAWujBC,EAAAA,QAAQ,EAAE,SAASC,oBAAT,CAA8B5L,EAA9B,EAAkCC,GAAlC,EAAuC;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAC1pB3G,MAAAA,MAAM,CAACwS,eAAP;AACAxS,MAAAA,MAAM,CAACyS,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;AACAzS,MAAAA,MAAM,CAAC0S,YAAP,CAAoB,CAApB;AACA1S,MAAAA,MAAM,CAAC2S,YAAP;AACH;AAAE,GAhBqC;AAgBnCC,EAAAA,MAAM,EAAE,CAAC,6/FAAD,CAhB2B;AAgBs+FC,EAAAA,aAAa,EAAE,CAhBr/F;AAgBw/FC,EAAAA,eAAe,EAAE;AAhBzgG,CAAzB,CAAnB;;AAiBA9I,WAAW,CAACtB,cAAZ,GAA6B;AAAA,SAAM,CAC/B;AAAEpH,IAAAA,IAAI,EAAE7D;AAAR,GAD+B,EAE/B;AAAE6D,IAAAA,IAAI,EAAEzD;AAAR,GAF+B,EAG/B;AAAEyD,IAAAA,IAAI,EAAE5B,cAAR;AAAwBiJ,IAAAA,UAAU,EAAE,CAAC;AAAErH,MAAAA,IAAI,EAAE3D;AAAR,KAAD;AAApC,GAH+B,EAI/B;AAAE2D,IAAAA,IAAI,EAAE1B,MAAR;AAAgB+I,IAAAA,UAAU,EAAE,CAAC;AAAErH,MAAAA,IAAI,EAAE3D;AAAR,KAAD;AAA5B,GAJ+B,EAK/B;AAAE2D,IAAAA,IAAI,EAAEzB,kBAAR;AAA4B8I,IAAAA,UAAU,EAAE,CAAC;AAAErH,MAAAA,IAAI,EAAE3D;AAAR,KAAD;AAAxC,GAL+B,EAM/B;AAAE2D,IAAAA,IAAI,EAAExC;AAAR,GAN+B,EAO/B;AAAEwC,IAAAA,IAAI,EAAExB,SAAR;AAAmB6I,IAAAA,UAAU,EAAE,CAAC;AAAErH,MAAAA,IAAI,EAAE3D;AAAR,KAAD,EAAqB;AAAE2D,MAAAA,IAAI,EAAEjD;AAAR,KAArB;AAA/B,GAP+B,CAAN;AAAA,CAA7B;;AASA2L,WAAW,CAACnB,cAAZ,GAA6B;AACzBoJ,EAAAA,iBAAiB,EAAE,CAAC;AAAE3Q,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CADM;AAEzBmN,EAAAA,QAAQ,EAAE,CAAC;AAAE7J,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CAFe;AAGzBgU,EAAAA,WAAW,EAAE,CAAC;AAAE1Q,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CAHY;AAIzBwG,EAAAA,KAAK,EAAE,CAAC;AAAElD,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CAJkB;AAKzB8T,EAAAA,QAAQ,EAAE,CAAC;AAAExQ,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CALe;AAMzB6N,EAAAA,WAAW,EAAE,CAAC;AAAEvK,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CANY;AAOzBsG,EAAAA,QAAQ,EAAE,CAAC;AAAEhD,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CAPe;AAQzB+M,EAAAA,eAAe,EAAE,CAAC;AAAEzJ,IAAAA,IAAI,EAAEtD,KAAR;AAAe+D,IAAAA,IAAI,EAAE,CAAC,kBAAD;AAArB,GAAD,CARQ;AASzB+C,EAAAA,UAAU,EAAE,CAAC;AAAExD,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CATa;AAUzB4E,EAAAA,QAAQ,EAAE,CAAC;AAAEtB,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CAVe;AAWzBgN,EAAAA,MAAM,EAAE,CAAC;AAAE1J,IAAAA,IAAI,EAAErD;AAAR,GAAD,CAXiB;AAYzBgN,EAAAA,WAAW,EAAE,CAAC;AAAE3J,IAAAA,IAAI,EAAErD;AAAR,GAAD,CAZY;AAazBgO,EAAAA,KAAK,EAAE,CAAC;AAAE3K,IAAAA,IAAI,EAAEhD,eAAR;AAAyByD,IAAAA,IAAI,EAAE,CAACM,OAAD,EAAU;AACjC;AACA;AACA0Q,MAAAA,WAAW,EAAE;AAHoB,KAAV;AAA/B,GAAD;AAbkB,CAA7B;;AAmBA,CAAC,YAAY;AAAE,GAAC,OAAOlR,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7B,MAAM,CAAC8B,iBAAP,CAAyBkI,WAAzB,EAAsC,CAAC;AACjG1I,IAAAA,IAAI,EAAEpD,SAD2F;AAEjG6D,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,eADX;AAECsQ,MAAAA,QAAQ,wEAFT;AAGC9J,MAAAA,QAAQ,EAAE,aAHX;AAICvG,MAAAA,IAAI,EAAE;AACF,2BAAmB,6BADjB;AAEF,mCAA2B,0BAFzB;AAGF,gCAAwB,wBAHtB;AAIF,gCAAwB,qBAJtB;AAKF,+BAAuB,YALrB;AAMF,uCAA+B,UAN7B;AAOF,uBAAe,MAPb;AAQF,0CAAkC,UARhC;AASF,yCAAiC,YAT/B;AAUF,0CAAkC,UAVhC;AAWF,mCAA2B,iBAXzB;AAYF,iBAAS,eAZP;AAaF,mBAAW,SAbT;AAcF,kBAAU,SAdR;AAeF,qBAAa,kBAfX;AAgBF,gBAAQ;AAhBN,OAJP;AAsBCC,MAAAA,SAAS,EAAE,CAAC;AAAEP,QAAAA,OAAO,EAAE5B,mBAAX;AAAgC6B,QAAAA,WAAW,EAAEoI;AAA7C,OAAD,CAtBZ;AAuBC6I,MAAAA,aAAa,EAAE1U,iBAAiB,CAAC6U,IAvBlC;AAwBCF,MAAAA,eAAe,EAAE1U,uBAAuB,CAAC6U,MAxB1C;AAyBCL,MAAAA,MAAM,EAAE,CAAC,6/FAAD;AAzBT,KAAD;AAF2F,GAAD,CAAtC,EA6B1D,YAAY;AAAE,WAAO,CAAC;AAAEtR,MAAAA,IAAI,EAAEtB,MAAM,CAACvC;AAAf,KAAD,EAA8B;AAAE6D,MAAAA,IAAI,EAAEtB,MAAM,CAACnC;AAAf,KAA9B,EAAkE;AAAEyD,MAAAA,IAAI,EAAEpB,MAAM,CAACR,cAAf;AAA+BiJ,MAAAA,UAAU,EAAE,CAAC;AAC3HrH,QAAAA,IAAI,EAAE3D;AADqH,OAAD;AAA3C,KAAlE,EAEX;AAAE2D,MAAAA,IAAI,EAAEnB,MAAM,CAACP,MAAf;AAAuB+I,MAAAA,UAAU,EAAE,CAAC;AACtCrH,QAAAA,IAAI,EAAE3D;AADgC,OAAD;AAAnC,KAFW,EAIX;AAAE2D,MAAAA,IAAI,EAAEnB,MAAM,CAACN,kBAAf;AAAmC8I,MAAAA,UAAU,EAAE,CAAC;AAClDrH,QAAAA,IAAI,EAAE3D;AAD4C,OAAD;AAA/C,KAJW,EAMX;AAAE2D,MAAAA,IAAI,EAAElB,MAAM,CAACtB;AAAf,KANW,EAMyB;AAAEwC,MAAAA,IAAI,EAAEnB,MAAM,CAACL,SAAf;AAA0B6I,MAAAA,UAAU,EAAE,CAAC;AAC7ErH,QAAAA,IAAI,EAAE3D;AADuE,OAAD,EAE7E;AACC2D,QAAAA,IAAI,EAAEjD;AADP,OAF6E;AAAtC,KANzB,CAAP;AAUF,GAvC8C,EAuC5C;AAAE0M,IAAAA,eAAe,EAAE,CAAC;AAC9BzJ,MAAAA,IAAI,EAAEtD,KADwB;AAE9B+D,MAAAA,IAAI,EAAE,CAAC,kBAAD;AAFwB,KAAD,CAAnB;AAGViJ,IAAAA,MAAM,EAAE,CAAC;AACT1J,MAAAA,IAAI,EAAErD;AADG,KAAD,CAHE;AAKVgN,IAAAA,WAAW,EAAE,CAAC;AACd3J,MAAAA,IAAI,EAAErD;AADQ,KAAD,CALH;AAOVkN,IAAAA,QAAQ,EAAE,CAAC;AACX7J,MAAAA,IAAI,EAAEtD;AADK,KAAD,CAPA;AASVgU,IAAAA,WAAW,EAAE,CAAC;AACd1Q,MAAAA,IAAI,EAAEtD;AADQ,KAAD,CATH;AAWVwG,IAAAA,KAAK,EAAE,CAAC;AACRlD,MAAAA,IAAI,EAAEtD;AADE,KAAD,CAXG;AAaV8T,IAAAA,QAAQ,EAAE,CAAC;AACXxQ,MAAAA,IAAI,EAAEtD;AADK,KAAD,CAbA;AAeV6N,IAAAA,WAAW,EAAE,CAAC;AACdvK,MAAAA,IAAI,EAAEtD;AADQ,KAAD,CAfH;AAiBVsG,IAAAA,QAAQ,EAAE,CAAC;AACXhD,MAAAA,IAAI,EAAEtD;AADK,KAAD,CAjBA;AAmBV8G,IAAAA,UAAU,EAAE,CAAC;AACbxD,MAAAA,IAAI,EAAEtD;AADO,KAAD,CAnBF;AAqBV4E,IAAAA,QAAQ,EAAE,CAAC;AACXtB,MAAAA,IAAI,EAAEtD;AADK,KAAD,CArBA;AAuBViU,IAAAA,iBAAiB,EAAE,CAAC;AACpB3Q,MAAAA,IAAI,EAAEtD;AADc,KAAD,CAvBT;AAyBViO,IAAAA,KAAK,EAAE,CAAC;AACR3K,MAAAA,IAAI,EAAEhD,eADE;AAERyD,MAAAA,IAAI,EAAE,CAACM,OAAD,EAAU;AACR;AACA;AACA0Q,QAAAA,WAAW,EAAE;AAHL,OAAV;AAFE,KAAD;AAzBG,GAvC4C,CAAnD;AAuEC,CAvEhB;AAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIG,cAAc,GAAG,CAArB;AACA;AACA;AACA;AACA;;IACMC,Y;AACF,wBAAYrS,WAAZ,EAAyBsS,eAAzB,EAA0C;AAAA;;AACtC,SAAKtS,WAAL,GAAmBA,WAAnB;AACA,SAAKsS,eAAL,GAAuBA,eAAvB;AACA;;AACA,SAAKrH,OAAL,GAAe,KAAf;AACA,SAAKsH,UAAL,GAAkB,KAAlB;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,iBAAL,GAAyB,KAAKF,eAAL,CAAqBE,iBAA9C;AACA;;AACA,SAAKC,OAAL,GAAe,IAAI/V,YAAJ,EAAf;AACA;;AACA,SAAKqO,WAAL,GAAmB,EAAnB;AACA;;AACA,SAAKF,EAAL,iCAAiCuH,cAAc,EAA/C;AACA,SAAK/P,SAAL,GAAiB,KAAjB;AACA,SAAKqQ,aAAL,GAAqB,KAAK1S,WAAL,CAAiBiD,aAAtC;AACH;AACD;;;;;SACA,aAAaS,KAAb,EAAoB;AAChB,UAAIA,KAAJ,EAAW;AACP,aAAKiP,SAAL,GAAiBjP,KAAjB;;AACA,aAAKiP,SAAL,CAAeC,aAAf,CAA6B,IAA7B;AACH;AACJ;AACD;AACJ;AACA;;;;SACI,eAAgB;AAAE,aAAO,KAAKL,UAAZ;AAAyB,K;SAC3C,aAAc7O,KAAd,EAAqB;AAAE,WAAK6O,UAAL,GAAkBrU,qBAAqB,CAACwF,KAAD,CAAvC;AAAiD;AACxE;;;;SACA,eAAe;AAAE,aAAO,KAAKrB,SAAL,IAAmB,KAAKsQ,SAAL,IAAkB,KAAKA,SAAL,CAAenP,QAA3D;AAAuE,K;SACxF,aAAaE,KAAb,EAAoB;AAAE,WAAKrB,SAAL,GAAiBnE,qBAAqB,CAACwF,KAAD,CAAtC;AAAgD;AACtE;;;;SACA,eAAY;AAAE,aAAO,CAAC,KAAKgP,aAAL,CAAmBhP,KAA3B;AAAmC;;;WACjD,uBAAc;AACV,WAAKiP,SAAL,CAAe7H,YAAf,CAA4BlG,IAA5B;AACH;AACD;;;;WACA,kBAASE,KAAT,EAAgB;AACZ;AACA;AACA,UAAIA,KAAK,IAAIA,KAAK,CAACG,OAAN,KAAkB5I,GAA3B,IAAkC,CAACC,cAAc,CAACwI,KAAD,EAAQ,UAAR,CAArD,EAA0E;AACtE,aAAK6N,SAAL,CAAe7G,iBAAf;AACH;;AACD,WAAK+G,YAAL,CAAkB/N,KAAlB;AACH;AACD;;;;WACA,iBAAQ;AACJ,UAAI,KAAKgO,SAAT,EAAoB;AAChB,aAAKD,YAAL;AACH;;AACD,WAAK5H,OAAL,GAAe,KAAf,CAJI,CAKJ;;AACA,UAAI,CAAC,KAAK0H,SAAL,CAAe1H,OAApB,EAA6B;AACzB,aAAK0H,SAAL,CAAexL,KAAf;AACH;;AACD,WAAKwL,SAAL,CAAe7H,YAAf,CAA4BlG,IAA5B;AACH;;;WACD,kBAAS;AACL,WAAKqG,OAAL,GAAe,IAAf;;AACA,WAAK0H,SAAL,CAAe7H,YAAf,CAA4BlG,IAA5B;AACH;AACD;;;;WACA,sBAAaE,KAAb,EAAoB;AAChB,UAAI,CAAC,KAAK4N,aAAL,CAAmBhP,KAApB,IAA6B,CAAC,CAACoB,KAAnC,EAA0C;AACtC,aAAK6N,SAAL,CAAe9B,QAAf,CAAwB/L,KAAxB;AACH;;AACD,UAAI,CAACA,KAAD,IAAU,KAAKiO,eAAL,CAAqBjO,KAArB,CAAd,EAA2C;AACvC,aAAK2N,OAAL,CAAalO,IAAb,CAAkB;AAAEsJ,UAAAA,KAAK,EAAE,KAAK6E,aAAd;AAA6BhP,UAAAA,KAAK,EAAE,KAAKgP,aAAL,CAAmBhP;AAAvD,SAAlB;;AACA,YAAIoB,KAAJ,EAAW;AACPA,UAAAA,KAAK,CAACC,cAAN;AACH;AACJ;AACJ;;;WACD,oBAAW;AACP;AACA,WAAK4N,SAAL,CAAe7H,YAAf,CAA4BlG,IAA5B;AACH;AACD;;;;WACA,eAAMoI,OAAN,EAAe;AACX,WAAK0F,aAAL,CAAmB/N,KAAnB,CAAyBqI,OAAzB;AACH;AACD;;;;WACA,yBAAgBlI,KAAhB,EAAuB;AACnB,aAAO,CAACxI,cAAc,CAACwI,KAAD,CAAf,IAA0B,IAAIkO,GAAJ,CAAQ,KAAKR,iBAAb,EAAgCS,GAAhC,CAAoCnO,KAAK,CAACG,OAA1C,CAAjC;AACH;;;;;;AAELoN,YAAY,CAAClS,IAAb,GAAoB,SAAS+S,oBAAT,CAA8B7S,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAIgS,YAAV,EAAwBnT,MAAM,CAACuG,iBAAP,CAAyBvG,MAAM,CAACvC,UAAhC,CAAxB,EAAqEuC,MAAM,CAACuG,iBAAP,CAAyBgD,yBAAzB,CAArE,CAAP;AAAmI,CAA1L;;AACA4J,YAAY,CAAC/R,IAAb,GAAoBpB,MAAM,CAACqB,iBAAP,CAAyB;AAAEC,EAAAA,IAAI,EAAE6R,YAAR;AAAsB5R,EAAAA,SAAS,EAAE,CAAC,CAAC,OAAD,EAAU,iBAAV,EAA6B,EAA7B,CAAD,CAAjC;AAAqEC,EAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,gBAAJ,EAAsB,mBAAtB,CAAhF;AAA4H8F,EAAAA,QAAQ,EAAE,CAAtI;AAAyIC,EAAAA,YAAY,EAAE,SAAS0M,yBAAT,CAAmCtN,EAAnC,EAAuCC,GAAvC,EAA4C;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACtP3G,MAAAA,MAAM,CAACyH,UAAP,CAAkB,SAAlB,EAA6B,SAASyM,uCAAT,CAAiDvM,MAAjD,EAAyD;AAAE,eAAOf,GAAG,CAAC+K,QAAJ,CAAahK,MAAb,CAAP;AAA8B,OAAtH,EAAwH,MAAxH,EAAgI,SAASwM,oCAAT,GAAgD;AAAE,eAAOvN,GAAG,CAACqB,KAAJ,EAAP;AAAqB,OAAvM,EAAyM,OAAzM,EAAkN,SAASmM,qCAAT,GAAiD;AAAE,eAAOxN,GAAG,CAACyN,MAAJ,EAAP;AAAsB,OAA3R,EAA6R,OAA7R,EAAsS,SAASC,qCAAT,GAAiD;AAAE,eAAO1N,GAAG,CAAC2N,QAAJ,EAAP;AAAwB,OAAjX;AACH;;AAAC,QAAI5N,EAAE,GAAG,CAAT,EAAY;AACV3G,MAAAA,MAAM,CAAC4R,cAAP,CAAsB,IAAtB,EAA4BhL,GAAG,CAAC+E,EAAhC;AACA3L,MAAAA,MAAM,CAACkI,WAAP,CAAmB,UAAnB,EAA+BtB,GAAG,CAACtC,QAAJ,IAAgB,IAA/C,EAAqD,aAArD,EAAoEsC,GAAG,CAACiF,WAAJ,IAAmB,IAAvF,EAA6F,cAA7F,EAA6GjF,GAAG,CAAC6M,SAAJ,IAAiB7M,GAAG,CAAC6M,SAAJ,CAAc7J,SAA/B,GAA2ChD,GAAG,CAAC6M,SAAJ,CAAc7J,SAAd,CAAwB4K,OAAnE,GAA6E,IAA1L,EAAgM,eAAhM,EAAiN5N,GAAG,CAAC6M,SAAJ,IAAiB7M,GAAG,CAAC6M,SAAJ,CAAc3B,QAA/B,IAA2C,IAA5P;AACH;AAAE,GALsC;AAKpCzJ,EAAAA,MAAM,EAAE;AAAEiL,IAAAA,iBAAiB,EAAE,CAAC,+BAAD,EAAkC,mBAAlC,CAArB;AAA6EzH,IAAAA,WAAW,EAAE,aAA1F;AAAyGF,IAAAA,EAAE,EAAE,IAA7G;AAAmH8I,IAAAA,QAAQ,EAAE,CAAC,iBAAD,EAAoB,UAApB,CAA7H;AAA8Jb,IAAAA,SAAS,EAAE,CAAC,uBAAD,EAA0B,WAA1B,CAAzK;AAAiNtP,IAAAA,QAAQ,EAAE;AAA3N,GAL4B;AAK6MiE,EAAAA,OAAO,EAAE;AAAEgL,IAAAA,OAAO,EAAE;AAAX,GALtN;AAK2P/K,EAAAA,QAAQ,EAAE,CAAC,cAAD,EAAiB,iBAAjB,CALrQ;AAK0S/G,EAAAA,QAAQ,EAAE,CAACzB,MAAM,CAAC0U,oBAAR;AALpT,CAAzB,CAApB;;AAMAvB,YAAY,CAACzK,cAAb,GAA8B;AAAA,SAAM,CAChC;AAAEpH,IAAAA,IAAI,EAAE7D;AAAR,GADgC,EAEhC;AAAE6D,IAAAA,IAAI,EAAEsD,SAAR;AAAmB+D,IAAAA,UAAU,EAAE,CAAC;AAAErH,MAAAA,IAAI,EAAE1D,MAAR;AAAgBmE,MAAAA,IAAI,EAAE,CAACwH,yBAAD;AAAtB,KAAD;AAA/B,GAFgC,CAAN;AAAA,CAA9B;;AAIA4J,YAAY,CAACtK,cAAb,GAA8B;AAC1B4L,EAAAA,QAAQ,EAAE,CAAC;AAAEnT,IAAAA,IAAI,EAAEtD,KAAR;AAAe+D,IAAAA,IAAI,EAAE,CAAC,iBAAD;AAArB,GAAD,CADgB;AAE1B6R,EAAAA,SAAS,EAAE,CAAC;AAAEtS,IAAAA,IAAI,EAAEtD,KAAR;AAAe+D,IAAAA,IAAI,EAAE,CAAC,uBAAD;AAArB,GAAD,CAFe;AAG1BuR,EAAAA,iBAAiB,EAAE,CAAC;AAAEhS,IAAAA,IAAI,EAAEtD,KAAR;AAAe+D,IAAAA,IAAI,EAAE,CAAC,+BAAD;AAArB,GAAD,CAHO;AAI1BwR,EAAAA,OAAO,EAAE,CAAC;AAAEjS,IAAAA,IAAI,EAAErD,MAAR;AAAgB8D,IAAAA,IAAI,EAAE,CAAC,sBAAD;AAAtB,GAAD,CAJiB;AAK1B8J,EAAAA,WAAW,EAAE,CAAC;AAAEvK,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CALa;AAM1B2N,EAAAA,EAAE,EAAE,CAAC;AAAErK,IAAAA,IAAI,EAAEtD;AAAR,GAAD,CANsB;AAO1BsG,EAAAA,QAAQ,EAAE,CAAC;AAAEhD,IAAAA,IAAI,EAAEtD;AAAR,GAAD;AAPgB,CAA9B;;AASA,CAAC,YAAY;AAAE,GAAC,OAAO6D,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7B,MAAM,CAAC8B,iBAAP,CAAyBqR,YAAzB,EAAuC,CAAC;AAClG7R,IAAAA,IAAI,EAAE/D,SAD4F;AAElGwE,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,wBADX;AAECwG,MAAAA,QAAQ,EAAE,+BAFX;AAGCvG,MAAAA,IAAI,EAAE;AACF,iBAAS,kCADP;AAEF,qBAAa,kBAFX;AAGF,kBAAU,SAHR;AAIF,mBAAW,UAJT;AAKF,mBAAW,YALT;AAMF,gBAAQ,IANN;AAOF,2BAAmB,kBAPjB;AAQF,8BAAsB,qBARpB;AASF,+BAAuB,uEATrB;AAUF,gCAAwB;AAVtB;AAHP,KAAD;AAF4F,GAAD,CAAvC,EAkB1D,YAAY;AAAE,WAAO,CAAC;AAAEX,MAAAA,IAAI,EAAEtB,MAAM,CAACvC;AAAf,KAAD,EAA8B;AAAE6D,MAAAA,IAAI,EAAEsD,SAAR;AAAmB+D,MAAAA,UAAU,EAAE,CAAC;AAC3ErH,QAAAA,IAAI,EAAE1D,MADqE;AAE3EmE,QAAAA,IAAI,EAAE,CAACwH,yBAAD;AAFqE,OAAD;AAA/B,KAA9B,CAAP;AAGF,GArB8C,EAqB5C;AAAE+J,IAAAA,iBAAiB,EAAE,CAAC;AAChChS,MAAAA,IAAI,EAAEtD,KAD0B;AAEhC+D,MAAAA,IAAI,EAAE,CAAC,+BAAD;AAF0B,KAAD,CAArB;AAGVwR,IAAAA,OAAO,EAAE,CAAC;AACVjS,MAAAA,IAAI,EAAErD,MADI;AAEV8D,MAAAA,IAAI,EAAE,CAAC,sBAAD;AAFI,KAAD,CAHC;AAMV8J,IAAAA,WAAW,EAAE,CAAC;AACdvK,MAAAA,IAAI,EAAEtD;AADQ,KAAD,CANH;AAQV2N,IAAAA,EAAE,EAAE,CAAC;AACLrK,MAAAA,IAAI,EAAEtD;AADD,KAAD,CARM;AAUVyW,IAAAA,QAAQ,EAAE,CAAC;AACXnT,MAAAA,IAAI,EAAEtD,KADK;AAEX+D,MAAAA,IAAI,EAAE,CAAC,iBAAD;AAFK,KAAD,CAVA;AAaV6R,IAAAA,SAAS,EAAE,CAAC;AACZtS,MAAAA,IAAI,EAAEtD,KADM;AAEZ+D,MAAAA,IAAI,EAAE,CAAC,uBAAD;AAFM,KAAD,CAbD;AAgBVuC,IAAAA,QAAQ,EAAE,CAAC;AACXhD,MAAAA,IAAI,EAAEtD;AADK,KAAD;AAhBA,GArB4C,CAAnD;AAuCC,CAvChB;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAM2W,iBAAiB,GAAG,CACtB3K,WADsB,EAEtB3H,OAFsB,EAGtB8Q,YAHsB,EAItBrK,aAJsB,EAKtB9H,aALsB,EAMtBmB,mBANsB,CAA1B;AAQA,IAAMyS,EAAE,GAAG;AACPtB,EAAAA,iBAAiB,EAAE,CAACjW,KAAD;AADZ,CAAX;;IAGMwX,c;;;;AAENA,cAAc,CAAC5T,IAAf,GAAsB,SAAS6T,sBAAT,CAAgC3T,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAI0T,cAAV,GAAP;AAAqC,CAAhG;;AACAA,cAAc,CAACE,IAAf,GAAsB/U,MAAM,CAACgV,gBAAP,CAAwB;AAAE1T,EAAAA,IAAI,EAAEuT;AAAR,CAAxB,CAAtB;AACAA,cAAc,CAACI,IAAf,GAAsBjV,MAAM,CAACkV,gBAAP,CAAwB;AAAEhT,EAAAA,SAAS,EAAE,CACnDpD,iBADmD,EAEnD;AACI6C,IAAAA,OAAO,EAAE4H,yBADb;AAEI4L,IAAAA,QAAQ,EAAEP;AAFd,GAFmD,CAAb;AAMvCQ,EAAAA,OAAO,EAAE,CAAC,CAACrW,eAAD,CAAD;AAN8B,CAAxB,CAAtB;;AAOA,CAAC,YAAY;AAAE,GAAC,OAAOsW,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDrV,MAAM,CAACsV,kBAAP,CAA0BT,cAA1B,EAA0C;AAAEU,IAAAA,YAAY,EAAE,wBAAY;AAAE,aAAO,CAACvL,WAAD,EAAc3H,OAAd,EAAuB8Q,YAAvB,EAAqCrK,aAArC,EAAoD9H,aAApD,EAAmEmB,mBAAnE,CAAP;AAAiG,KAA/H;AAAiIiT,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAACrW,eAAD,CAAP;AAA2B,KAAnL;AAAqLyW,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAACxL,WAAD,EAAc3H,OAAd,EAAuB8Q,YAAvB,EAAqCrK,aAArC,EAAoD9H,aAApD,EAAmEmB,mBAAnE,CAAP;AAAiG;AAA7S,GAA1C,CAAnD;AAAgZ,CAA/Z;;AACA,CAAC,YAAY;AAAE,GAAC,OAAON,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7B,MAAM,CAAC8B,iBAAP,CAAyB+S,cAAzB,EAAyC,CAAC;AACpGvT,IAAAA,IAAI,EAAE/C,QAD8F;AAEpGwD,IAAAA,IAAI,EAAE,CAAC;AACCqT,MAAAA,OAAO,EAAE,CAACrW,eAAD,CADV;AAECyW,MAAAA,OAAO,EAAEb,iBAFV;AAGCY,MAAAA,YAAY,EAAEZ,iBAHf;AAICzS,MAAAA,SAAS,EAAE,CACPpD,iBADO,EAEP;AACI6C,QAAAA,OAAO,EAAE4H,yBADb;AAEI4L,QAAAA,QAAQ,EAAEP;AAFd,OAFO;AAJZ,KAAD;AAF8F,GAAD,CAAzC,EAc1D,IAd0D,EAcpD,IAdoD,CAAnD;AAcO,CAdtB;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASrL,yBAAT,EAAoC5I,eAApC,EAAqDD,eAArD,EAAsEE,sBAAtE,EAA8FyB,OAA9F,EAAuGrB,aAAvG,EAAsHmS,YAAtH,EAAoInJ,WAApI,EAAiJD,iBAAjJ,EAAoKjB,aAApK,EAAmLxI,sBAAnL,EAA2M6B,mBAA3M,EAAgO0S,cAAhO,EAAgPD,EAAhP,G,CAEA","sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' },\n                providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }]\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' },\n                providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }]\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._animationsDisabled ||\n            !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n    get selected() { return this._selected; }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() { return this._removable; }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MAT_CHIP_AVATAR,] }],\n    trailingIcon: [{ type: ContentChild, args: [MAT_CHIP_TRAILING_ICON,] }],\n    removeIcon: [{ type: ContentChild, args: [MAT_CHIP_REMOVE,] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MAT_CHIP_AVATAR]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_TRAILING_ICON]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_REMOVE]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }])] });\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                },\n                providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }]\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, \n    /** @docs-private */\n    ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() { return this.empty ? null : 'listbox'; }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._value; }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() { return this._selectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            let input = element;\n            return !input.value;\n        }\n        return false;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /** Whether the input is disabled. */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether the input is empty. */\n    get empty() { return !this._inputElement.value; }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._inputElement.focus(options);\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); };\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ɵ0\n        }\n    ], imports: [[MatCommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n\n//# sourceMappingURL=chips.js.map"]},"metadata":{},"sourceType":"module"}