{"ast":null,"code":"import _get from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createForOfIteratorHelper from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _inherits from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nvar BaseTreeControl = /*#__PURE__*/function () {\n  function BaseTreeControl() {\n    _classCallCheck(this, BaseTreeControl);\n\n    /** A selection model with multi-selection to track expansion status. */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /** Toggles one single data node's expanded/collapsed state. */\n\n\n  _createClass(BaseTreeControl, [{\n    key: \"toggle\",\n    value: function toggle(dataNode) {\n      this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n\n  }, {\n    key: \"expand\",\n    value: function expand(dataNode) {\n      this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n\n  }, {\n    key: \"collapse\",\n    value: function collapse(dataNode) {\n      this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n\n  }, {\n    key: \"isExpanded\",\n    value: function isExpanded(dataNode) {\n      return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n\n  }, {\n    key: \"toggleDescendants\",\n    value: function toggleDescendants(dataNode) {\n      this.expansionModel.isSelected(this._trackByValue(dataNode)) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll() {\n      this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n\n  }, {\n    key: \"expandDescendants\",\n    value: function expandDescendants(dataNode) {\n      var _this$expansionModel,\n          _this = this;\n\n      var toBeProcessed = [dataNode];\n      toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));\n\n      (_this$expansionModel = this.expansionModel).select.apply(_this$expansionModel, _toConsumableArray(toBeProcessed.map(function (value) {\n        return _this._trackByValue(value);\n      })));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n\n  }, {\n    key: \"collapseDescendants\",\n    value: function collapseDescendants(dataNode) {\n      var _this$expansionModel2,\n          _this2 = this;\n\n      var toBeProcessed = [dataNode];\n      toBeProcessed.push.apply(toBeProcessed, _toConsumableArray(this.getDescendants(dataNode)));\n\n      (_this$expansionModel2 = this.expansionModel).deselect.apply(_this$expansionModel2, _toConsumableArray(toBeProcessed.map(function (value) {\n        return _this2._trackByValue(value);\n      })));\n    }\n  }, {\n    key: \"_trackByValue\",\n    value: function _trackByValue(value) {\n      return this.trackBy ? this.trackBy(value) : value;\n    }\n  }]);\n\n  return BaseTreeControl;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\n\n\nvar FlatTreeControl = /*#__PURE__*/function (_BaseTreeControl) {\n  _inherits(FlatTreeControl, _BaseTreeControl);\n\n  var _super = _createSuper(FlatTreeControl);\n\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  function FlatTreeControl(getLevel, isExpandable, options) {\n    var _this3;\n\n    _classCallCheck(this, FlatTreeControl);\n\n    _this3 = _super.call(this);\n    _this3.getLevel = getLevel;\n    _this3.isExpandable = isExpandable;\n    _this3.options = options;\n\n    if (_this3.options) {\n      _this3.trackBy = _this3.options.trackBy;\n    }\n\n    return _this3;\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n\n\n  _createClass(FlatTreeControl, [{\n    key: \"getDescendants\",\n    value: function getDescendants(dataNode) {\n      var startIndex = this.dataNodes.indexOf(dataNode);\n      var results = []; // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n      // The level of descendants of a tree node must be greater than the level of the given\n      // tree node.\n      // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n      // If we reach a node whose level is greater than the level of the tree node, we hit a\n      // sibling of an ancestor.\n\n      for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n        results.push(this.dataNodes[i]);\n      }\n\n      return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n\n  }, {\n    key: \"expandAll\",\n    value: function expandAll() {\n      var _this$expansionModel3,\n          _this4 = this;\n\n      (_this$expansionModel3 = this.expansionModel).select.apply(_this$expansionModel3, _toConsumableArray(this.dataNodes.map(function (node) {\n        return _this4._trackByValue(node);\n      })));\n    }\n  }]);\n\n  return FlatTreeControl;\n}(BaseTreeControl);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\n\n\nvar NestedTreeControl = /*#__PURE__*/function (_BaseTreeControl2) {\n  _inherits(NestedTreeControl, _BaseTreeControl2);\n\n  var _super2 = _createSuper(NestedTreeControl);\n\n  /** Construct with nested tree function getChildren. */\n  function NestedTreeControl(getChildren, options) {\n    var _this5;\n\n    _classCallCheck(this, NestedTreeControl);\n\n    _this5 = _super2.call(this);\n    _this5.getChildren = getChildren;\n    _this5.options = options;\n\n    if (_this5.options) {\n      _this5.trackBy = _this5.options.trackBy;\n    }\n\n    return _this5;\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n\n\n  _createClass(NestedTreeControl, [{\n    key: \"expandAll\",\n    value: function expandAll() {\n      var _this6 = this,\n          _this$expansionModel4;\n\n      this.expansionModel.clear();\n      var allNodes = this.dataNodes.reduce(function (accumulator, dataNode) {\n        return [].concat(_toConsumableArray(accumulator), _toConsumableArray(_this6.getDescendants(dataNode)), [dataNode]);\n      }, []);\n\n      (_this$expansionModel4 = this.expansionModel).select.apply(_this$expansionModel4, _toConsumableArray(allNodes.map(function (node) {\n        return _this6._trackByValue(node);\n      })));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n\n  }, {\n    key: \"getDescendants\",\n    value: function getDescendants(dataNode) {\n      var descendants = [];\n\n      this._getDescendants(descendants, dataNode); // Remove the node itself\n\n\n      return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n\n  }, {\n    key: \"_getDescendants\",\n    value: function _getDescendants(descendants, dataNode) {\n      var _this7 = this;\n\n      descendants.push(dataNode);\n      var childrenNodes = this.getChildren(dataNode);\n\n      if (Array.isArray(childrenNodes)) {\n        childrenNodes.forEach(function (child) {\n          return _this7._getDescendants(descendants, child);\n        });\n      } else if (isObservable(childrenNodes)) {\n        // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n        // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n        childrenNodes.pipe(take(1), filter(Boolean)).subscribe(function (children) {\n          var _iterator = _createForOfIteratorHelper(children),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var child = _step.value;\n\n              _this7._getDescendants(descendants, child);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      }\n    }\n  }]);\n\n  return NestedTreeControl;\n}(BaseTreeControl);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\n\n\nvar CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\nvar CdkTreeNodeOutlet = /*#__PURE__*/_createClass(function CdkTreeNodeOutlet(viewContainer, _node) {\n  _classCallCheck(this, CdkTreeNodeOutlet);\n\n  this.viewContainer = viewContainer;\n  this._node = _node;\n});\n\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n  return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nCdkTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeOutlet,\n  selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n});\n\nCdkTreeNodeOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TREE_NODE_OUTLET_NODE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Context provided to the tree node component. */\n\n\nvar CdkTreeNodeOutletContext = /*#__PURE__*/_createClass(function CdkTreeNodeOutletContext(data) {\n  _classCallCheck(this, CdkTreeNodeOutletContext);\n\n  this.$implicit = data;\n});\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nvar CdkTreeNodeDef = /*#__PURE__*/_createClass(\n/** @docs-private */\nfunction CdkTreeNodeDef(template) {\n  _classCallCheck(this, CdkTreeNodeDef);\n\n  this.template = template;\n});\n\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n  return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeDef,\n  selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"cdkTreeNodeDefWhen\", \"when\"]\n  }\n});\n\nCdkTreeNodeDef.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeDef]',\n      inputs: ['when: cdkTreeNodeDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\n\n\nfunction getTreeNoValidDataSourceError() {\n  return Error(\"A valid data source must be provided.\");\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\n\n\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\n\n\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(\"Could not find a matching node definition for the provided node data.\");\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\n\n\nfunction getTreeControlMissingError() {\n  return Error(\"Could not find a tree control for the tree.\");\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\n\n\nfunction getTreeControlFunctionsMissingError() {\n  return Error(\"Could not find functions for nested/flat tree in tree control.\");\n}\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n\n\nvar CdkTree = /*#__PURE__*/function () {\n  function CdkTree(_differs, _changeDetectorRef) {\n    _classCallCheck(this, CdkTree);\n\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n    /** Level of nodes */\n\n    this._levels = new Map(); // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n  }\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   */\n\n\n  _createClass(CdkTree, [{\n    key: \"dataSource\",\n    get: function get() {\n      return this._dataSource;\n    },\n    set: function set(dataSource) {\n      if (this._dataSource !== dataSource) {\n        this._switchDataSource(dataSource);\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n      if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTreeControlMissingError();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._nodeOutlet.viewContainer.clear();\n\n      this.viewChange.complete();\n\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n\n      if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n        this.dataSource.disconnect(this);\n      }\n\n      if (this._dataSubscription) {\n        this._dataSubscription.unsubscribe();\n\n        this._dataSubscription = null;\n      }\n    }\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      var defaultNodeDefs = this._nodeDefs.filter(function (def) {\n        return !def.when;\n      });\n\n      if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTreeMultipleDefaultNodeDefsError();\n      }\n\n      this._defaultNodeDef = defaultNodeDefs[0];\n\n      if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n        this._observeRenderChanges();\n      }\n    } // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n\n  }, {\n    key: \"_switchDataSource\",\n    value: function _switchDataSource(dataSource) {\n      if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n        this.dataSource.disconnect(this);\n      }\n\n      if (this._dataSubscription) {\n        this._dataSubscription.unsubscribe();\n\n        this._dataSubscription = null;\n      } // Remove the all dataNodes if there is now no data source\n\n\n      if (!dataSource) {\n        this._nodeOutlet.viewContainer.clear();\n      }\n\n      this._dataSource = dataSource;\n\n      if (this._nodeDefs) {\n        this._observeRenderChanges();\n      }\n    }\n    /** Set up a subscription for the data provided by the data source. */\n\n  }, {\n    key: \"_observeRenderChanges\",\n    value: function _observeRenderChanges() {\n      var _this8 = this;\n\n      var dataStream;\n\n      if (isDataSource(this._dataSource)) {\n        dataStream = this._dataSource.connect(this);\n      } else if (isObservable(this._dataSource)) {\n        dataStream = this._dataSource;\n      } else if (Array.isArray(this._dataSource)) {\n        dataStream = of(this._dataSource);\n      }\n\n      if (dataStream) {\n        this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(function (data) {\n          return _this8.renderNodeChanges(data);\n        });\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getTreeNoValidDataSourceError();\n      }\n    }\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n\n  }, {\n    key: \"renderNodeChanges\",\n    value: function renderNodeChanges(data) {\n      var _this9 = this;\n\n      var dataDiffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._dataDiffer;\n      var viewContainer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._nodeOutlet.viewContainer;\n      var parentData = arguments.length > 3 ? arguments[3] : undefined;\n      var changes = dataDiffer.diff(data);\n\n      if (!changes) {\n        return;\n      }\n\n      changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n        if (item.previousIndex == null) {\n          _this9.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n        } else if (currentIndex == null) {\n          viewContainer.remove(adjustedPreviousIndex);\n\n          _this9._levels.delete(item.item);\n        } else {\n          var view = viewContainer.get(adjustedPreviousIndex);\n          viewContainer.move(view, currentIndex);\n        }\n      });\n\n      this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n\n  }, {\n    key: \"_getNodeDef\",\n    value: function _getNodeDef(data, i) {\n      if (this._nodeDefs.length === 1) {\n        return this._nodeDefs.first;\n      }\n\n      var nodeDef = this._nodeDefs.find(function (def) {\n        return def.when && def.when(i, data);\n      }) || this._defaultNodeDef;\n\n      if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTreeMissingMatchingNodeDefError();\n      }\n\n      return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n\n  }, {\n    key: \"insertNode\",\n    value: function insertNode(nodeData, index, viewContainer, parentData) {\n      var node = this._getNodeDef(nodeData, index); // Node context that will be provided to created embedded view\n\n\n      var context = new CdkTreeNodeOutletContext(nodeData); // If the tree is flat tree, then use the `getLevel` function in flat tree control\n      // Otherwise, use the level of parent node.\n\n      if (this.treeControl.getLevel) {\n        context.level = this.treeControl.getLevel(nodeData);\n      } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n        context.level = this._levels.get(parentData) + 1;\n      } else {\n        context.level = 0;\n      }\n\n      this._levels.set(nodeData, context.level); // Use default tree nodeOutlet, or nested node's nodeOutlet\n\n\n      var container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n      container.createEmbeddedView(node.template, context, index); // Set the data to just created `CdkTreeNode`.\n      // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n      //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n\n      if (CdkTreeNode.mostRecentTreeNode) {\n        CdkTreeNode.mostRecentTreeNode.data = nodeData;\n      }\n    }\n  }]);\n\n  return CdkTree;\n}();\n\nCdkTree.ɵfac = function CdkTree_Factory(t) {\n  return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nCdkTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkTree,\n  selectors: [[\"cdk-tree\"]],\n  contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    }\n  },\n  viewQuery: function CdkTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 3);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n  inputs: {\n    dataSource: \"dataSource\",\n    treeControl: \"treeControl\",\n    trackBy: \"trackBy\"\n  },\n  exportAs: [\"cdkTree\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n  template: function CdkTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkTreeNodeOutlet],\n  encapsulation: 2\n});\n\nCdkTree.ctorParameters = function () {\n  return [{\n    type: IterableDiffers\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nCdkTree.propDecorators = {\n  dataSource: [{\n    type: Input\n  }],\n  treeControl: [{\n    type: Input\n  }],\n  trackBy: [{\n    type: Input\n  }],\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [CdkTreeNodeOutlet, {\n      static: true\n    }]\n  }],\n  _nodeDefs: [{\n    type: ContentChildren,\n    args: [CdkTreeNodeDef, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-tree',\n      exportAs: 'cdkTree',\n      template: \"<ng-container cdkTreeNodeOutlet></ng-container>\",\n      host: {\n        'class': 'cdk-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n      // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n      // declared elsewhere, they are checked when their declaration points are checked.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    dataSource: [{\n      type: Input\n    }],\n    treeControl: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [CdkTreeNodeOutlet, {\n        static: true\n      }]\n    }],\n    _nodeDefs: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeDef, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n\n\nvar CdkTreeNode = /*#__PURE__*/function () {\n  function CdkTreeNode(_elementRef, _tree) {\n    _classCallCheck(this, CdkTreeNode);\n\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._destroyed = new Subject();\n    /** Emits when the node's data has changed. */\n\n    this._dataChanges = new Subject();\n    CdkTreeNode.mostRecentTreeNode = this; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    this._elementRef.nativeElement.classList.add('cdk-tree-node');\n\n    this.role = 'treeitem';\n  }\n  /**\n   * The role of the tree node.\n   * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n   *   removed in a future version.\n   * @breaking-change 12.0.0 Remove this input\n   */\n\n\n  _createClass(CdkTreeNode, [{\n    key: \"role\",\n    get: function get() {\n      return 'treeitem';\n    },\n    set: function set(_role) {\n      // TODO: move to host after View Engine deprecation\n      this._elementRef.nativeElement.setAttribute('role', _role);\n    }\n    /** The tree node's data. */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    },\n    set: function set(value) {\n      if (value !== this._data) {\n        this._data = value;\n\n        this._setRoleFromData();\n\n        this._dataChanges.next();\n      }\n    }\n  }, {\n    key: \"isExpanded\",\n    get: function get() {\n      return this._tree.treeControl.isExpanded(this._data);\n    }\n  }, {\n    key: \"_setExpanded\",\n    value: function _setExpanded(_expanded) {\n      this._isAriaExpanded = _expanded;\n\n      this._elementRef.nativeElement.setAttribute('aria-expanded', \"\".concat(_expanded));\n    }\n  }, {\n    key: \"level\",\n    get: function get() {\n      // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n      // aria-level off the parent node and use it as the level for this node (note aria-level is\n      // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n      return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n\n      this._elementRef.nativeElement.setAttribute('aria-level', \"\".concat(this.level + 1));\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      // aria-expanded is be set here because the expanded state is stored in the tree control and\n      // the node isn't aware when the state is changed.\n      // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n      // TODO: move to host after View Engine deprecation\n      if (this.isExpanded != this._isAriaExpanded) {\n        this._setExpanded(this.isExpanded);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // If this is the last tree node being destroyed,\n      // clear out the reference to avoid leaking memory.\n      if (CdkTreeNode.mostRecentTreeNode === this) {\n        CdkTreeNode.mostRecentTreeNode = null;\n      }\n\n      this._dataChanges.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** Focuses the menu item. Implements for FocusableOption. */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._elementRef.nativeElement.focus();\n    } // TODO: role should eventually just be set in the component host\n\n  }, {\n    key: \"_setRoleFromData\",\n    value: function _setRoleFromData() {\n      if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTreeControlFunctionsMissingError();\n      }\n\n      this.role = 'treeitem';\n    }\n  }]);\n\n  return CdkTreeNode;\n}();\n\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n  return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree));\n};\n\nCdkTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNode,\n  selectors: [[\"cdk-tree-node\"]],\n  inputs: {\n    role: \"role\"\n  },\n  exportAs: [\"cdkTreeNode\"]\n});\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\n\nCdkTreeNode.mostRecentTreeNode = null;\n\nCdkTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }];\n};\n\nCdkTreeNode.propDecorators = {\n  role: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-tree-node',\n      exportAs: 'cdkTreeNode'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: CdkTree\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n\nfunction getParentNodeAriaLevel(nodeElement) {\n  var parent = nodeElement.parentElement;\n\n  while (parent && !isNodeElement(parent)) {\n    parent = parent.parentElement;\n  }\n\n  if (!parent) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('Incorrect tree structure containing detached node.');\n    } else {\n      return -1;\n    }\n  } else if (parent.classList.contains('cdk-nested-tree-node')) {\n    return coerceNumberProperty(parent.getAttribute('aria-level'));\n  } else {\n    // The ancestor element is the cdk-tree itself\n    return 0;\n  }\n}\n\nfunction isNodeElement(element) {\n  var classList = element.classList;\n  return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\n\n\nvar CdkNestedTreeNode = /*#__PURE__*/function (_CdkTreeNode) {\n  _inherits(CdkNestedTreeNode, _CdkTreeNode);\n\n  var _super3 = _createSuper(CdkNestedTreeNode);\n\n  function CdkNestedTreeNode(_elementRef, _tree, _differs) {\n    var _this10;\n\n    _classCallCheck(this, CdkNestedTreeNode);\n\n    _this10 = _super3.call(this, _elementRef, _tree);\n    _this10._elementRef = _elementRef;\n    _this10._tree = _tree;\n    _this10._differs = _differs; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    _this10._elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n\n    return _this10;\n  }\n\n  _createClass(CdkNestedTreeNode, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this11 = this;\n\n      this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n      if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTreeControlFunctionsMissingError();\n      }\n\n      var childrenNodes = this._tree.treeControl.getChildren(this.data);\n\n      if (Array.isArray(childrenNodes)) {\n        this.updateChildrenNodes(childrenNodes);\n      } else if (isObservable(childrenNodes)) {\n        childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(function (result) {\n          return _this11.updateChildrenNodes(result);\n        });\n      }\n\n      this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this11.updateChildrenNodes();\n      });\n    } // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      _get(_getPrototypeOf(CdkNestedTreeNode.prototype), \"ngOnInit\", this).call(this);\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      _get(_getPrototypeOf(CdkNestedTreeNode.prototype), \"ngDoCheck\", this).call(this);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._clear();\n\n      _get(_getPrototypeOf(CdkNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n    }\n    /** Add children dataNodes to the NodeOutlet */\n\n  }, {\n    key: \"updateChildrenNodes\",\n    value: function updateChildrenNodes(children) {\n      var outlet = this._getNodeOutlet();\n\n      if (children) {\n        this._children = children;\n      }\n\n      if (outlet && this._children) {\n        var viewContainer = outlet.viewContainer;\n\n        this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n      } else {\n        // Reset the data differ if there's no children nodes displayed\n        this._dataDiffer.diff([]);\n      }\n    }\n    /** Clear the children dataNodes. */\n\n  }, {\n    key: \"_clear\",\n    value: function _clear() {\n      var outlet = this._getNodeOutlet();\n\n      if (outlet) {\n        outlet.viewContainer.clear();\n\n        this._dataDiffer.diff([]);\n      }\n    }\n    /** Gets the outlet for the current node. */\n\n  }, {\n    key: \"_getNodeOutlet\",\n    value: function _getNodeOutlet() {\n      var _this12 = this;\n\n      var outlets = this.nodeOutlet; // Note that since we use `descendants: true` on the query, we have to ensure\n      // that we don't pick up the outlet of a child node by accident.\n\n      return outlets && outlets.find(function (outlet) {\n        return !outlet._node || outlet._node === _this12;\n      });\n    }\n  }]);\n\n  return CdkNestedTreeNode;\n}(CdkTreeNode);\n\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n  return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nCdkNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkNestedTreeNode,\n  selectors: [[\"cdk-nested-tree-node\"]],\n  contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    }\n  },\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"cdkNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: CdkNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: CdkNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkNestedTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }, {\n    type: IterableDiffers\n  }];\n};\n\nCdkNestedTreeNode.propDecorators = {\n  nodeOutlet: [{\n    type: ContentChildren,\n    args: [CdkTreeNodeOutlet, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-nested-tree-node',\n      exportAs: 'cdkNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: CdkNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: CdkNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, {\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeOutlet, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Regex used to split a string on its CSS units. */\n\n\nvar cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n\nvar CdkTreeNodePadding = /*#__PURE__*/function () {\n  function CdkTreeNodePadding(_treeNode, _tree, _element, _dir) {\n    var _this13 = this;\n\n    _classCallCheck(this, CdkTreeNodePadding);\n\n    this._treeNode = _treeNode;\n    this._tree = _tree;\n    this._element = _element;\n    this._dir = _dir;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._destroyed = new Subject();\n    /** CSS units used for the indentation value. */\n\n    this.indentUnits = 'px';\n    this._indent = 40;\n\n    this._setPadding();\n\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this13._setPadding(true);\n      });\n    } // In Ivy the indentation binding might be set before the tree node's data has been added,\n    // which means that we'll miss the first render. We have to subscribe to changes in the\n    // data to ensure that everything is up to date.\n\n\n    _treeNode._dataChanges.subscribe(function () {\n      return _this13._setPadding();\n    });\n  }\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n\n\n  _createClass(CdkTreeNodePadding, [{\n    key: \"level\",\n    get: function get() {\n      return this._level;\n    },\n    set: function set(value) {\n      this._setLevelInput(value);\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     */\n\n  }, {\n    key: \"indent\",\n    get: function get() {\n      return this._indent;\n    },\n    set: function set(indent) {\n      this._setIndentInput(indent);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n\n  }, {\n    key: \"_paddingIndent\",\n    value: function _paddingIndent() {\n      var nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n      var level = this._level == null ? nodeLevel : this._level;\n      return typeof level === 'number' ? \"\".concat(level * this._indent).concat(this.indentUnits) : null;\n    }\n  }, {\n    key: \"_setPadding\",\n    value: function _setPadding() {\n      var forceChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var padding = this._paddingIndent();\n\n      if (padding !== this._currentPadding || forceChange) {\n        var element = this._element.nativeElement;\n        var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n        var resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n        element.style[paddingProp] = padding || '';\n        element.style[resetProp] = '';\n        this._currentPadding = padding;\n      }\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n\n  }, {\n    key: \"_setLevelInput\",\n    value: function _setLevelInput(value) {\n      // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n      // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n      // they set 0 explicitly.\n      this._level = coerceNumberProperty(value, null);\n\n      this._setPadding();\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n\n  }, {\n    key: \"_setIndentInput\",\n    value: function _setIndentInput(indent) {\n      var value = indent;\n      var units = 'px';\n\n      if (typeof indent === 'string') {\n        var parts = indent.split(cssUnitPattern);\n        value = parts[0];\n        units = parts[1] || units;\n      }\n\n      this.indentUnits = units;\n      this._indent = coerceNumberProperty(value);\n\n      this._setPadding();\n    }\n  }]);\n\n  return CdkTreeNodePadding;\n}();\n\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n  return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\n\nCdkTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodePadding,\n  selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"cdkTreeNodePadding\", \"level\"],\n    indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n  }\n});\n\nCdkTreeNodePadding.ctorParameters = function () {\n  return [{\n    type: CdkTreeNode\n  }, {\n    type: CdkTree\n  }, {\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nCdkTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['cdkTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['cdkTreeNodePaddingIndent']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodePadding]'\n    }]\n  }], function () {\n    return [{\n      type: CdkTreeNode\n    }, {\n      type: CdkTree\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    level: [{\n      type: Input,\n      args: ['cdkTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['cdkTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Node toggle to expand/collapse the node.\n */\n\n\nvar CdkTreeNodeToggle = /*#__PURE__*/function () {\n  function CdkTreeNodeToggle(_tree, _treeNode) {\n    _classCallCheck(this, CdkTreeNodeToggle);\n\n    this._tree = _tree;\n    this._treeNode = _treeNode;\n    this._recursive = false;\n  }\n  /** Whether expand/collapse the node recursively. */\n\n\n  _createClass(CdkTreeNodeToggle, [{\n    key: \"recursive\",\n    get: function get() {\n      return this._recursive;\n    },\n    set: function set(value) {\n      this._recursive = coerceBooleanProperty(value);\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n  }, {\n    key: \"_toggle\",\n    value: function _toggle(event) {\n      this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n      event.stopPropagation();\n    }\n  }]);\n\n  return CdkTreeNodeToggle;\n}();\n\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n  return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode));\n};\n\nCdkTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeToggle,\n  selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n  hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n        return ctx._toggle($event);\n      });\n    }\n  },\n  inputs: {\n    recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n  }\n});\n\nCdkTreeNodeToggle.ctorParameters = function () {\n  return [{\n    type: CdkTree\n  }, {\n    type: CdkTreeNode\n  }];\n};\n\nCdkTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['cdkTreeNodeToggleRecursive']\n  }],\n  _toggle: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeToggle]'\n    }]\n  }], function () {\n    return [{\n      type: CdkTree\n    }, {\n      type: CdkTreeNode\n    }];\n  }, {\n    recursive: [{\n      type: Input,\n      args: ['cdkTreeNodeToggleRecursive']\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n\nvar CdkTreeModule = /*#__PURE__*/_createClass(function CdkTreeModule() {\n  _classCallCheck(this, CdkTreeModule);\n});\n\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n  return new (t || CdkTreeModule)();\n};\n\nCdkTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTreeModule\n});\nCdkTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, {\n    declarations: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet],\n    exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n    type: NgModule,\n    args: [{\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError }; //# sourceMappingURL=tree.js.map","map":{"version":3,"sources":["/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/tree.js"],"names":["SelectionModel","isDataSource","isObservable","Subject","BehaviorSubject","of","take","filter","takeUntil","InjectionToken","Directive","ViewContainerRef","Inject","Optional","TemplateRef","Component","ViewEncapsulation","ChangeDetectionStrategy","IterableDiffers","ChangeDetectorRef","Input","ViewChild","ContentChildren","ElementRef","HostListener","NgModule","coerceNumberProperty","coerceBooleanProperty","Directionality","ɵngcc0","ɵngcc1","BaseTreeControl","expansionModel","dataNode","toggle","_trackByValue","select","deselect","isSelected","collapseDescendants","expandDescendants","clear","toBeProcessed","push","getDescendants","map","value","trackBy","FlatTreeControl","getLevel","isExpandable","options","startIndex","dataNodes","indexOf","results","i","length","node","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","pipe","Boolean","subscribe","children","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodeOutlet","viewContainer","_node","ɵfac","CdkTreeNodeOutlet_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","selector","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","CdkTreeNodeDef_Factory","inputs","when","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","Map","viewChange","start","end","Number","MAX_VALUE","_dataSource","dataSource","_switchDataSource","_dataDiffer","find","create","treeControl","_nodeOutlet","complete","next","disconnect","_dataSubscription","unsubscribe","defaultNodeDefs","_nodeDefs","def","_defaultNodeDef","_observeRenderChanges","dataStream","connect","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","first","nodeDef","nodeData","index","_getNodeDef","context","level","has","set","container","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","CdkTree_Factory","ɵcmp","ɵɵdefineComponent","contentQueries","CdkTree_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","CdkTree_Query","ɵɵviewQuery","hostAttrs","exportAs","decls","vars","consts","CdkTree_Template","ɵɵelementContainer","directives","encapsulation","propDecorators","static","host","None","changeDetection","Default","_elementRef","_tree","_destroyed","_dataChanges","nativeElement","classList","add","role","_role","setAttribute","_data","_setRoleFromData","isExpanded","_expanded","_isAriaExpanded","_parentNodeAriaLevel","getParentNodeAriaLevel","_setExpanded","focus","CdkTreeNode_Factory","nodeElement","parent","parentElement","isNodeElement","contains","getAttribute","element","CdkNestedTreeNode","updateChildrenNodes","result","nodeOutlet","_clear","outlet","_getNodeOutlet","_children","outlets","CdkNestedTreeNode_Factory","CdkNestedTreeNode_ContentQueries","disabled","tabIndex","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","providers","cssUnitPattern","CdkTreeNodePadding","_treeNode","_element","_dir","indentUnits","_indent","_setPadding","change","_level","_setLevelInput","indent","_setIndentInput","nodeLevel","forceChange","padding","_paddingIndent","_currentPadding","paddingProp","resetProp","style","units","parts","split","CdkTreeNodePadding_Factory","CdkTreeNodeToggle","_recursive","event","recursive","toggleDescendants","stopPropagation","CdkTreeNodeToggle_Factory","hostBindings","CdkTreeNodeToggle_HostBindings","ɵɵlistener","CdkTreeNodeToggle_click_HostBindingHandler","$event","_toggle","EXPORTED_DECLARATIONS","CdkTreeModule","CdkTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /** A selection model with multi-selection to track expansion status. */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode) {\n        this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n    expand(dataNode) {\n        this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode) {\n        this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(this._trackByValue(dataNode)) ?\n            this.collapseDescendants(dataNode) :\n            this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    _trackByValue(value) {\n        return this.trackBy ? this.trackBy(value) : value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nclass FlatTreeControl extends BaseTreeControl {\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(getLevel, isExpandable, options) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode) {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nclass NestedTreeControl extends BaseTreeControl {\n    /** Construct with nested tree function getChildren. */\n    constructor(getChildren, options) {\n        super();\n        this.getChildren = getChildren;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode) {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter(Boolean))\n                .subscribe(children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nCdkTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass CdkTreeNodeDef {\n    /** @docs-private */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nclass CdkTree {\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /** Level of nodes */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n    get dataSource() { return this._dataSource; }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlMissingError();\n        }\n    }\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this.viewChange.complete();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex);\n                this._levels.delete(item.item);\n            }\n            else {\n                const view = viewContainer.get(adjustedPreviousIndex);\n                viewContainer.move(view, currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkTreeNodeOutlet], encapsulation: 2 });\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet, { static: true }]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nclass CdkTreeNode {\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Emits when the node's data has changed. */\n        this._dataChanges = new Subject();\n        CdkTreeNode.mostRecentTreeNode = this;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.classList.add('cdk-tree-node');\n        this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n    get role() { return 'treeitem'; }\n    set role(_role) {\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.setAttribute('role', _role);\n    }\n    /** The tree node's data. */\n    get data() { return this._data; }\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    _setExpanded(_expanded) {\n        this._isAriaExpanded = _expanded;\n        this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\n    }\n    get level() {\n        // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n        // aria-level off the parent node and use it as the level for this node (note aria-level is\n        // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n        return this._tree.treeControl.getLevel ?\n            this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n    }\n    ngOnInit() {\n        this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n        this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n    }\n    ngDoCheck() {\n        // aria-expanded is be set here because the expanded state is stored in the tree control and\n        // the node isn't aware when the state is changed.\n        // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n        // TODO: move to host after View Engine deprecation\n        if (this.isExpanded != this._isAriaExpanded) {\n            this._setExpanded(this.isExpanded);\n        }\n    }\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Focuses the menu item. Implements for FocusableOption. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    // TODO: role should eventually just be set in the component host\n    _setRoleFromData() {\n        if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        this.role = 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\nfunction getParentNodeAriaLevel(nodeElement) {\n    let parent = nodeElement.parentElement;\n    while (parent && !isNodeElement(parent)) {\n        parent = parent.parentElement;\n    }\n    if (!parent) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw Error('Incorrect tree structure containing detached node.');\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (parent.classList.contains('cdk-nested-tree-node')) {\n        return coerceNumberProperty(parent.getAttribute('aria-level'));\n    }\n    else {\n        // The ancestor element is the cdk-tree itself\n        return 0;\n    }\n}\nfunction isNodeElement(element) {\n    const classList = element.classList;\n    return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    constructor(_elementRef, _tree, _differs) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n    }\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(childrenNodes);\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n    updateChildrenNodes(children) {\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Clear the children dataNodes. */\n    _clear() {\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Gets the outlet for the current node. */\n    _getNodeOutlet() {\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nclass CdkTreeNodePadding {\n    constructor(_treeNode, _tree, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._element = _element;\n        this._dir = _dir;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** CSS units used for the indentation value. */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe(() => this._setPadding());\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() { return this._level; }\n    set level(value) { this._setLevelInput(value); }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     */\n    get indent() { return this._indent; }\n    set indent(indent) { this._setIndentInput(indent); }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent() {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    _setPadding(forceChange = false) {\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            const element = this._element.nativeElement;\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            element.style[paddingProp] = padding || '';\n            element.style[resetProp] = '';\n            this._currentPadding = padding;\n        }\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setLevelInput(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null);\n        this._setPadding();\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setIndentInput(indent) {\n        let value = indent;\n        let units = 'px';\n        if (typeof indent === 'string') {\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nclass CdkTreeNodeToggle {\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n    get recursive() { return this._recursive; }\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n    _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{ selector: '[cdkTreeNodeToggle]' }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); };\nCdkTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet], exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n\n//# sourceMappingURL=tree.js.map"]},"metadata":{},"sourceType":"module"}