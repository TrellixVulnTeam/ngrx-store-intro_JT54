{"ast":null,"code":"import _classCallCheck from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { DOCUMENT } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar PendingCopy = /*#__PURE__*/function () {\n  function PendingCopy(text, _document) {\n    _classCallCheck(this, PendingCopy);\n\n    this._document = _document;\n\n    var textarea = this._textarea = this._document.createElement('textarea');\n\n    var styles = textarea.style; // Hide the element for display and accessibility. Set a fixed position so the page layout\n    // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n    // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n\n    styles.position = 'fixed';\n    styles.top = styles.opacity = '0';\n    styles.left = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n\n    this._document.body.appendChild(textarea);\n  }\n  /** Finishes copying the text. */\n\n\n  _createClass(PendingCopy, [{\n    key: \"copy\",\n    value: function copy() {\n      var textarea = this._textarea;\n      var successful = false;\n\n      try {\n        // Older browsers could throw if copy is not supported.\n        if (textarea) {\n          var currentFocus = this._document.activeElement;\n          textarea.select();\n          textarea.setSelectionRange(0, textarea.value.length);\n          successful = this._document.execCommand('copy');\n\n          if (currentFocus) {\n            currentFocus.focus();\n          }\n        }\n      } catch (_a) {// Discard error.\n        // Initial setting of {@code successful} will represent failure here.\n      }\n\n      return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var textarea = this._textarea;\n\n      if (textarea) {\n        if (textarea.parentNode) {\n          textarea.parentNode.removeChild(textarea);\n        }\n\n        this._textarea = undefined;\n      }\n    }\n  }]);\n\n  return PendingCopy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A service for copying text to the clipboard.\n */\n\n\nvar Clipboard = /*#__PURE__*/function () {\n  function Clipboard(document) {\n    _classCallCheck(this, Clipboard);\n\n    this._document = document;\n  }\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n\n\n  _createClass(Clipboard, [{\n    key: \"copy\",\n    value: function copy(text) {\n      var pendingCopy = this.beginCopy(text);\n      var successful = pendingCopy.copy();\n      pendingCopy.destroy();\n      return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n\n  }, {\n    key: \"beginCopy\",\n    value: function beginCopy(text) {\n      return new PendingCopy(text, this._document);\n    }\n  }]);\n\n  return Clipboard;\n}();\n\nClipboard.ɵfac = function Clipboard_Factory(t) {\n  return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nClipboard.ɵprov = ɵɵdefineInjectable({\n  factory: function Clipboard_Factory() {\n    return new Clipboard(ɵɵinject(DOCUMENT));\n  },\n  token: Clipboard,\n  providedIn: \"root\"\n});\n\nClipboard.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\n\n\nvar CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.\n * @breaking-change 13.0.0\n */\n\nvar CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\n\nvar CdkCopyToClipboard = /*#__PURE__*/function () {\n  function CdkCopyToClipboard(_clipboard, _ngZone, config) {\n    _classCallCheck(this, CdkCopyToClipboard);\n\n    this._clipboard = _clipboard;\n    this._ngZone = _ngZone;\n    /** Content to be copied. */\n\n    this.text = '';\n    /**\n     * How many times to attempt to copy the text. This may be necessary for longer text, because\n     * the browser needs time to fill an intermediate textarea element and copy the content.\n     */\n\n    this.attempts = 1;\n    /**\n     * Emits when some text is copied to the clipboard. The\n     * emitted value indicates whether copying was successful.\n     */\n\n    this.copied = new EventEmitter();\n    /** Copies that are currently being attempted. */\n\n    this._pending = new Set();\n\n    if (config && config.attempts != null) {\n      this.attempts = config.attempts;\n    }\n  }\n  /** Copies the current text to the clipboard. */\n\n\n  _createClass(CdkCopyToClipboard, [{\n    key: \"copy\",\n    value: function copy() {\n      var _this = this;\n\n      var attempts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.attempts;\n\n      if (attempts > 1) {\n        var remainingAttempts = attempts;\n\n        var pending = this._clipboard.beginCopy(this.text);\n\n        this._pending.add(pending);\n\n        var attempt = function attempt() {\n          var successful = pending.copy();\n\n          if (!successful && --remainingAttempts && !_this._destroyed) {\n            // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n            _this._currentTimeout = _this._ngZone.runOutsideAngular(function () {\n              return setTimeout(attempt, 1);\n            });\n          } else {\n            _this._currentTimeout = null;\n\n            _this._pending.delete(pending);\n\n            pending.destroy();\n\n            _this.copied.emit(successful);\n          }\n        };\n\n        attempt();\n      } else {\n        this.copied.emit(this._clipboard.copy(this.text));\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._currentTimeout) {\n        clearTimeout(this._currentTimeout);\n      }\n\n      this._pending.forEach(function (copy) {\n        return copy.destroy();\n      });\n\n      this._pending.clear();\n\n      this._destroyed = true;\n    }\n  }]);\n\n  return CdkCopyToClipboard;\n}();\n\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) {\n  return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8));\n};\n\nCdkCopyToClipboard.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkCopyToClipboard,\n  selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]],\n  hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() {\n        return ctx.copy();\n      });\n    }\n  },\n  inputs: {\n    text: [\"cdkCopyToClipboard\", \"text\"],\n    attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"]\n  },\n  outputs: {\n    copied: \"cdkCopyToClipboardCopied\"\n  }\n});\n\nCdkCopyToClipboard.ctorParameters = function () {\n  return [{\n    type: Clipboard\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n    }]\n  }];\n};\n\nCdkCopyToClipboard.propDecorators = {\n  text: [{\n    type: Input,\n    args: ['cdkCopyToClipboard']\n  }],\n  attempts: [{\n    type: Input,\n    args: ['cdkCopyToClipboardAttempts']\n  }],\n  copied: [{\n    type: Output,\n    args: ['cdkCopyToClipboardCopied']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCopyToClipboard]',\n      host: {\n        '(click)': 'copy()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: Clipboard\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n      }]\n    }];\n  }, {\n    text: [{\n      type: Input,\n      args: ['cdkCopyToClipboard']\n    }],\n    attempts: [{\n      type: Input,\n      args: ['cdkCopyToClipboardAttempts']\n    }],\n    copied: [{\n      type: Output,\n      args: ['cdkCopyToClipboardCopied']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar ClipboardModule = /*#__PURE__*/_createClass(function ClipboardModule() {\n  _classCallCheck(this, ClipboardModule);\n});\n\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) {\n  return new (t || ClipboardModule)();\n};\n\nClipboardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ClipboardModule\n});\nClipboardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, {\n    declarations: [CdkCopyToClipboard],\n    exports: [CdkCopyToClipboard]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkCopyToClipboard],\n      exports: [CdkCopyToClipboard]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy }; //# sourceMappingURL=clipboard.js.map","map":{"version":3,"sources":["/Users/volodymyrmaliarov/Projects/ngRxIntro/ngrx-store-intro/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/clipboard.js"],"names":["DOCUMENT","ɵɵdefineInjectable","ɵɵinject","Injectable","Inject","InjectionToken","EventEmitter","Directive","NgZone","Optional","Input","Output","NgModule","ɵngcc0","PendingCopy","text","_document","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","body","appendChild","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","_a","parentNode","removeChild","undefined","Clipboard","document","pendingCopy","beginCopy","copy","destroy","ɵfac","Clipboard_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","decorators","args","ngDevMode","ɵsetClassMetadata","CDK_COPY_TO_CLIPBOARD_CONFIG","CKD_COPY_TO_CLIPBOARD_CONFIG","CdkCopyToClipboard","_clipboard","_ngZone","config","attempts","copied","_pending","Set","remainingAttempts","pending","add","attempt","_destroyed","_currentTimeout","runOutsideAngular","setTimeout","delete","emit","clearTimeout","forEach","clear","CdkCopyToClipboard_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","hostBindings","CdkCopyToClipboard_HostBindings","rf","ctx","ɵɵlistener","CdkCopyToClipboard_click_HostBindingHandler","inputs","outputs","propDecorators","selector","host","ClipboardModule","ClipboardModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = this._textarea = this._document.createElement('textarea');\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try { // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch (_a) {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            if (textarea.parentNode) {\n                textarea.parentNode.removeChild(textarea);\n            }\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = function Clipboard_Factory(t) { return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nClipboard.ɵprov = ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(ɵɵinject(DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\nClipboard.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.\n * @breaking-change 13.0.0\n */\nconst CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) { return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8)); };\nCdkCopyToClipboard.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCopyToClipboard, selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]], hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() { return ctx.copy(); });\n    } }, inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" } });\nCdkCopyToClipboard.ctorParameters = () => [\n    { type: Clipboard },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\n];\nCdkCopyToClipboard.propDecorators = {\n    text: [{ type: Input, args: ['cdkCopyToClipboard',] }],\n    attempts: [{ type: Input, args: ['cdkCopyToClipboardAttempts',] }],\n    copied: [{ type: Output, args: ['cdkCopyToClipboardCopied',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkCopyToClipboard]',\n                host: {\n                    '(click)': 'copy()'\n                }\n            }]\n    }], function () { return [{ type: Clipboard }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n            }] }]; }, { text: [{\n            type: Input,\n            args: ['cdkCopyToClipboard']\n        }], attempts: [{\n            type: Input,\n            args: ['cdkCopyToClipboardAttempts']\n        }], copied: [{\n            type: Output,\n            args: ['cdkCopyToClipboardCopied']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); };\nClipboardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkCopyToClipboard],\n                exports: [CdkCopyToClipboard]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n\n//# sourceMappingURL=clipboard.js.map"]},"metadata":{},"sourceType":"module"}